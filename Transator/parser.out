Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    DRIGHT
    RETURN

Grammar

Rule 0     S' -> start
Rule 1     start -> imports start
Rule 2     start -> function start
Rule 3     start -> comment start
Rule 4     start -> empty
Rule 5     index -> variable
Rule 6     index -> literal
Rule 7     index -> expression
Rule 8     brackets -> LBRACKET index RBRACKET brackets
Rule 9     brackets -> LBRACKET index RBRACKET
Rule 10    array -> ID brackets
Rule 11    variable -> ID
Rule 12    variable -> array
Rule 13    var_assign -> variable ASSIGN expression
Rule 14    var_assign -> type variable ASSIGN expression
Rule 15    if_else_statement -> if_statement
Rule 16    if_else_statement -> if_statement else_if_statement else_statement
Rule 17    if_else_statement -> if_statement else_statement
Rule 18    if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
Rule 19    if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
Rule 20    else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement
Rule 21    else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
Rule 22    else_if_statement -> empty
Rule 23    else_statement -> ELSE LBRACE body RBRACE
Rule 24    else_statement -> ELSE var_assign SEMICOLON
Rule 25    while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
Rule 26    for_assign -> var_assign COMMA for_assign
Rule 27    for_assign -> var_assign
Rule 28    for_assign -> empty
Rule 29    increment -> variable PLUS PLUS
Rule 30    decrement -> variable MINUS MINUS
Rule 31    for_iteration -> expression COMMA for_iteration
Rule 32    for_iteration -> expression
Rule 33    for_iteration -> empty
Rule 34    for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
Rule 35    comment -> COMMENT
Rule 36    imports -> INCLUDE imports
Rule 37    imports -> empty
Rule 38    operator -> PLUS
Rule 39    operator -> MINUS
Rule 40    operator -> DIVIDE
Rule 41    operator -> TIMES
Rule 42    bool_op -> AND
Rule 43    bool_op -> OR
Rule 44    compare_op -> GREATER
Rule 45    compare_op -> LESSER
Rule 46    compare_op -> EQUAL
Rule 47    compare_op -> NOTEQUAL
Rule 48    compare_op -> GREATER_EQUAL
Rule 49    compare_op -> LESSER_EQUAL
Rule 50    literal -> NUMBER
Rule 51    literal -> STR
Rule 52    literal -> bool_literal
Rule 53    bool_literal -> TRUE
Rule 54    bool_literal -> FALSE
Rule 55    type -> INT
Rule 56    type -> DOUBLE
Rule 57    type -> STRING
Rule 58    type -> BOOL
Rule 59    expression -> expression operator expression
Rule 60    expression -> LPAREN expression RPAREN
Rule 61    expression -> literal
Rule 62    expression -> function_call
Rule 63    expression -> variable
Rule 64    boolean_expr -> expression compare_op expression
Rule 65    boolean_expr -> NOT boolean_expr
Rule 66    boolean_expr -> boolean_expr bool_op boolean_expr
Rule 67    boolean_expr -> LPAREN boolean_expr RPAREN
Rule 68    boolean_expr -> bool_literal
Rule 69    function -> type ID LPAREN RPAREN LBRACE body RBRACE
Rule 70    call_args -> variable COMMA call_args
Rule 71    call_args -> empty
Rule 72    function_call -> ID LPAREN call_args RPAREN
Rule 73    empty -> <empty>
Rule 74    print -> STD NAMESPACE COUT DLEFT expression
Rule 75    body -> while_loop body
Rule 76    body -> for_loop body
Rule 77    body -> if_else_statement body
Rule 78    body -> expression SEMICOLON body
Rule 79    body -> var_assign SEMICOLON body
Rule 80    body -> print SEMICOLON body
Rule 81    body -> increment SEMICOLON body
Rule 82    body -> decrement SEMICOLON body
Rule 83    body -> empty

Terminals, with rules where they appear

AND                  : 42
ASSIGN               : 13 14
BOOL                 : 58
COMMA                : 26 31 70
COMMENT              : 35
COUT                 : 74
DIVIDE               : 40
DLEFT                : 74
DOT                  : 
DOUBLE               : 56
DRIGHT               : 
ELSE                 : 20 21 23 24
EQUAL                : 46
FALSE                : 54
FOR                  : 34
GREATER              : 44
GREATER_EQUAL        : 48
ID                   : 10 11 69 72
IF                   : 18 19 20 21
INCLUDE              : 36
INT                  : 55
LBRACE               : 18 20 23 25 34 69
LBRACKET             : 8 9
LESSER               : 45
LESSER_EQUAL         : 49
LPAREN               : 18 19 20 21 25 34 60 67 69 72
MINUS                : 30 30 39
NAMESPACE            : 74
NOT                  : 65
NOTEQUAL             : 47
NUMBER               : 50
OR                   : 43
PLUS                 : 29 29 38
RBRACE               : 18 20 23 25 34 69
RBRACKET             : 8 9
RETURN               : 
RPAREN               : 18 19 20 21 25 34 60 67 69 72
SEMICOLON            : 19 21 24 34 34 78 79 80 81 82
STD                  : 74
STR                  : 51
STRING               : 57
TIMES                : 41
TRUE                 : 53
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

array                : 12
body                 : 18 20 23 25 34 69 75 76 77 78 79 80 81 82
bool_literal         : 52 68
bool_op              : 66
boolean_expr         : 18 19 20 21 25 34 65 66 66 67
brackets             : 8 10
call_args            : 70 72
comment              : 3
compare_op           : 64
decrement            : 82
else_if_statement    : 16 20
else_statement       : 16 17
empty                : 4 22 28 33 37 71 83
expression           : 7 13 14 31 32 59 59 60 64 64 74 78
for_assign           : 26 34
for_iteration        : 31 34
for_loop             : 76
function             : 2
function_call        : 62
if_else_statement    : 77
if_statement         : 15 16 17
imports              : 1 36
increment            : 81
index                : 8 9
literal              : 6 61
operator             : 59
print                : 80
start                : 1 2 3 0
type                 : 14 69
var_assign           : 19 21 24 26 27 79
variable             : 5 13 14 29 30 63 70
while_loop           : 75

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . imports start
    (2) start -> . function start
    (3) start -> . comment start
    (4) start -> . empty
    (36) imports -> . INCLUDE imports
    (37) imports -> . empty
    (69) function -> . type ID LPAREN RPAREN LBRACE body RBRACE
    (35) comment -> . COMMENT
    (73) empty -> .
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    INCLUDE         shift and go to state 6
    COMMENT         shift and go to state 8
    $end            reduce using rule 73 (empty -> .)
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

  ! INCLUDE         [ reduce using rule 73 (empty -> .) ]
  ! COMMENT         [ reduce using rule 73 (empty -> .) ]
  ! INT             [ reduce using rule 73 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 73 (empty -> .) ]
  ! STRING          [ reduce using rule 73 (empty -> .) ]
  ! BOOL            [ reduce using rule 73 (empty -> .) ]

    start                          shift and go to state 1
    imports                        shift and go to state 2
    function                       shift and go to state 3
    comment                        shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 7

state 1

    (0) S' -> start .



state 2

    (1) start -> imports . start
    (1) start -> . imports start
    (2) start -> . function start
    (3) start -> . comment start
    (4) start -> . empty
    (36) imports -> . INCLUDE imports
    (37) imports -> . empty
    (69) function -> . type ID LPAREN RPAREN LBRACE body RBRACE
    (35) comment -> . COMMENT
    (73) empty -> .
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    INCLUDE         shift and go to state 6
    COMMENT         shift and go to state 8
    $end            reduce using rule 73 (empty -> .)
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

  ! INCLUDE         [ reduce using rule 73 (empty -> .) ]
  ! COMMENT         [ reduce using rule 73 (empty -> .) ]
  ! INT             [ reduce using rule 73 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 73 (empty -> .) ]
  ! STRING          [ reduce using rule 73 (empty -> .) ]
  ! BOOL            [ reduce using rule 73 (empty -> .) ]

    imports                        shift and go to state 2
    start                          shift and go to state 13
    function                       shift and go to state 3
    comment                        shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 7

state 3

    (2) start -> function . start
    (1) start -> . imports start
    (2) start -> . function start
    (3) start -> . comment start
    (4) start -> . empty
    (36) imports -> . INCLUDE imports
    (37) imports -> . empty
    (69) function -> . type ID LPAREN RPAREN LBRACE body RBRACE
    (35) comment -> . COMMENT
    (73) empty -> .
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    INCLUDE         shift and go to state 6
    COMMENT         shift and go to state 8
    $end            reduce using rule 73 (empty -> .)
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

  ! INCLUDE         [ reduce using rule 73 (empty -> .) ]
  ! COMMENT         [ reduce using rule 73 (empty -> .) ]
  ! INT             [ reduce using rule 73 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 73 (empty -> .) ]
  ! STRING          [ reduce using rule 73 (empty -> .) ]
  ! BOOL            [ reduce using rule 73 (empty -> .) ]

    function                       shift and go to state 3
    start                          shift and go to state 14
    imports                        shift and go to state 2
    comment                        shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 7

state 4

    (3) start -> comment . start
    (1) start -> . imports start
    (2) start -> . function start
    (3) start -> . comment start
    (4) start -> . empty
    (36) imports -> . INCLUDE imports
    (37) imports -> . empty
    (69) function -> . type ID LPAREN RPAREN LBRACE body RBRACE
    (35) comment -> . COMMENT
    (73) empty -> .
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    INCLUDE         shift and go to state 6
    COMMENT         shift and go to state 8
    $end            reduce using rule 73 (empty -> .)
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

  ! INCLUDE         [ reduce using rule 73 (empty -> .) ]
  ! COMMENT         [ reduce using rule 73 (empty -> .) ]
  ! INT             [ reduce using rule 73 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 73 (empty -> .) ]
  ! STRING          [ reduce using rule 73 (empty -> .) ]
  ! BOOL            [ reduce using rule 73 (empty -> .) ]

    comment                        shift and go to state 4
    start                          shift and go to state 15
    imports                        shift and go to state 2
    function                       shift and go to state 3
    empty                          shift and go to state 5
    type                           shift and go to state 7

state 5

    (4) start -> empty .
    (37) imports -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (start -> empty .)
    $end            reduce using rule 4 (start -> empty .)
    INCLUDE         reduce using rule 37 (imports -> empty .)
    COMMENT         reduce using rule 37 (imports -> empty .)
    INT             reduce using rule 37 (imports -> empty .)
    DOUBLE          reduce using rule 37 (imports -> empty .)
    STRING          reduce using rule 37 (imports -> empty .)
    BOOL            reduce using rule 37 (imports -> empty .)

  ! $end            [ reduce using rule 37 (imports -> empty .) ]


state 6

    (36) imports -> INCLUDE . imports
    (36) imports -> . INCLUDE imports
    (37) imports -> . empty
    (73) empty -> .

  ! shift/reduce conflict for INCLUDE resolved as shift
    INCLUDE         shift and go to state 6
    COMMENT         reduce using rule 73 (empty -> .)
    INT             reduce using rule 73 (empty -> .)
    DOUBLE          reduce using rule 73 (empty -> .)
    STRING          reduce using rule 73 (empty -> .)
    BOOL            reduce using rule 73 (empty -> .)
    $end            reduce using rule 73 (empty -> .)

  ! INCLUDE         [ reduce using rule 73 (empty -> .) ]

    imports                        shift and go to state 16
    empty                          shift and go to state 17

state 7

    (69) function -> type . ID LPAREN RPAREN LBRACE body RBRACE

    ID              shift and go to state 18


state 8

    (35) comment -> COMMENT .

    INCLUDE         reduce using rule 35 (comment -> COMMENT .)
    COMMENT         reduce using rule 35 (comment -> COMMENT .)
    INT             reduce using rule 35 (comment -> COMMENT .)
    DOUBLE          reduce using rule 35 (comment -> COMMENT .)
    STRING          reduce using rule 35 (comment -> COMMENT .)
    BOOL            reduce using rule 35 (comment -> COMMENT .)
    $end            reduce using rule 35 (comment -> COMMENT .)


state 9

    (55) type -> INT .

    ID              reduce using rule 55 (type -> INT .)


state 10

    (56) type -> DOUBLE .

    ID              reduce using rule 56 (type -> DOUBLE .)


state 11

    (57) type -> STRING .

    ID              reduce using rule 57 (type -> STRING .)


state 12

    (58) type -> BOOL .

    ID              reduce using rule 58 (type -> BOOL .)


state 13

    (1) start -> imports start .

    $end            reduce using rule 1 (start -> imports start .)


state 14

    (2) start -> function start .

    $end            reduce using rule 2 (start -> function start .)


state 15

    (3) start -> comment start .

    $end            reduce using rule 3 (start -> comment start .)


state 16

    (36) imports -> INCLUDE imports .

    INCLUDE         reduce using rule 36 (imports -> INCLUDE imports .)
    COMMENT         reduce using rule 36 (imports -> INCLUDE imports .)
    INT             reduce using rule 36 (imports -> INCLUDE imports .)
    DOUBLE          reduce using rule 36 (imports -> INCLUDE imports .)
    STRING          reduce using rule 36 (imports -> INCLUDE imports .)
    BOOL            reduce using rule 36 (imports -> INCLUDE imports .)
    $end            reduce using rule 36 (imports -> INCLUDE imports .)


state 17

    (37) imports -> empty .

    INCLUDE         reduce using rule 37 (imports -> empty .)
    COMMENT         reduce using rule 37 (imports -> empty .)
    INT             reduce using rule 37 (imports -> empty .)
    DOUBLE          reduce using rule 37 (imports -> empty .)
    STRING          reduce using rule 37 (imports -> empty .)
    BOOL            reduce using rule 37 (imports -> empty .)
    $end            reduce using rule 37 (imports -> empty .)


state 18

    (69) function -> type ID . LPAREN RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 19


state 19

    (69) function -> type ID LPAREN . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 20


state 20

    (69) function -> type ID LPAREN RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 21


state 21

    (69) function -> type ID LPAREN RPAREN LBRACE . body RBRACE
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    type                           shift and go to state 22
    body                           shift and go to state 25
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 22

    (14) var_assign -> type . variable ASSIGN expression
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    ID              shift and go to state 50

    variable                       shift and go to state 49
    array                          shift and go to state 46

state 23

    (72) function_call -> ID . LPAREN call_args RPAREN
    (11) variable -> ID .
    (10) array -> ID . brackets
    (8) brackets -> . LBRACKET index RBRACKET brackets
    (9) brackets -> . LBRACKET index RBRACKET

    LPAREN          shift and go to state 51
    ASSIGN          reduce using rule 11 (variable -> ID .)
    PLUS            reduce using rule 11 (variable -> ID .)
    MINUS           reduce using rule 11 (variable -> ID .)
    SEMICOLON       reduce using rule 11 (variable -> ID .)
    DIVIDE          reduce using rule 11 (variable -> ID .)
    TIMES           reduce using rule 11 (variable -> ID .)
    RPAREN          reduce using rule 11 (variable -> ID .)
    RBRACKET        reduce using rule 11 (variable -> ID .)
    GREATER         reduce using rule 11 (variable -> ID .)
    LESSER          reduce using rule 11 (variable -> ID .)
    EQUAL           reduce using rule 11 (variable -> ID .)
    NOTEQUAL        reduce using rule 11 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 11 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 11 (variable -> ID .)
    COMMA           reduce using rule 11 (variable -> ID .)
    AND             reduce using rule 11 (variable -> ID .)
    OR              reduce using rule 11 (variable -> ID .)
    LBRACKET        shift and go to state 53

    brackets                       shift and go to state 52

state 24

    (60) expression -> LPAREN . expression RPAREN
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expression                     shift and go to state 54
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 25

    (69) function -> type ID LPAREN RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 56


state 26

    (75) body -> while_loop . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    while_loop                     shift and go to state 26
    body                           shift and go to state 57
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 27

    (76) body -> for_loop . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    for_loop                       shift and go to state 27
    body                           shift and go to state 58
    while_loop                     shift and go to state 26
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 28

    (77) body -> if_else_statement . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    if_else_statement              shift and go to state 28
    body                           shift and go to state 59
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 29

    (78) body -> expression . SEMICOLON body
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    SEMICOLON       shift and go to state 60
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 30

    (79) body -> var_assign . SEMICOLON body

    SEMICOLON       shift and go to state 66


state 31

    (80) body -> print . SEMICOLON body

    SEMICOLON       shift and go to state 67


state 32

    (81) body -> increment . SEMICOLON body

    SEMICOLON       shift and go to state 68


state 33

    (82) body -> decrement . SEMICOLON body

    SEMICOLON       shift and go to state 69


state 34

    (83) body -> empty .

    RBRACE          reduce using rule 83 (body -> empty .)


state 35

    (25) while_loop -> WHILE . LPAREN boolean_expr RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 70


state 36

    (34) for_loop -> FOR . LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 71


state 37

    (15) if_else_statement -> if_statement .
    (16) if_else_statement -> if_statement . else_if_statement else_statement
    (17) if_else_statement -> if_statement . else_statement
    (20) else_if_statement -> . ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> . ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (22) else_if_statement -> . empty
    (23) else_statement -> . ELSE LBRACE body RBRACE
    (24) else_statement -> . ELSE var_assign SEMICOLON
    (73) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    WHILE           reduce using rule 15 (if_else_statement -> if_statement .)
    FOR             reduce using rule 15 (if_else_statement -> if_statement .)
    LPAREN          reduce using rule 15 (if_else_statement -> if_statement .)
    STD             reduce using rule 15 (if_else_statement -> if_statement .)
    IF              reduce using rule 15 (if_else_statement -> if_statement .)
    NUMBER          reduce using rule 15 (if_else_statement -> if_statement .)
    STR             reduce using rule 15 (if_else_statement -> if_statement .)
    ID              reduce using rule 15 (if_else_statement -> if_statement .)
    INT             reduce using rule 15 (if_else_statement -> if_statement .)
    DOUBLE          reduce using rule 15 (if_else_statement -> if_statement .)
    STRING          reduce using rule 15 (if_else_statement -> if_statement .)
    BOOL            reduce using rule 15 (if_else_statement -> if_statement .)
    TRUE            reduce using rule 15 (if_else_statement -> if_statement .)
    FALSE           reduce using rule 15 (if_else_statement -> if_statement .)
    RBRACE          reduce using rule 15 (if_else_statement -> if_statement .)
    ELSE            shift and go to state 74

  ! ELSE            [ reduce using rule 73 (empty -> .) ]

    else_if_statement              shift and go to state 72
    else_statement                 shift and go to state 73
    empty                          shift and go to state 75

state 38

    (61) expression -> literal .

    SEMICOLON       reduce using rule 61 (expression -> literal .)
    PLUS            reduce using rule 61 (expression -> literal .)
    MINUS           reduce using rule 61 (expression -> literal .)
    DIVIDE          reduce using rule 61 (expression -> literal .)
    TIMES           reduce using rule 61 (expression -> literal .)
    RPAREN          reduce using rule 61 (expression -> literal .)
    RBRACKET        reduce using rule 61 (expression -> literal .)
    GREATER         reduce using rule 61 (expression -> literal .)
    LESSER          reduce using rule 61 (expression -> literal .)
    EQUAL           reduce using rule 61 (expression -> literal .)
    NOTEQUAL        reduce using rule 61 (expression -> literal .)
    GREATER_EQUAL   reduce using rule 61 (expression -> literal .)
    LESSER_EQUAL    reduce using rule 61 (expression -> literal .)
    COMMA           reduce using rule 61 (expression -> literal .)
    AND             reduce using rule 61 (expression -> literal .)
    OR              reduce using rule 61 (expression -> literal .)


state 39

    (62) expression -> function_call .

    SEMICOLON       reduce using rule 62 (expression -> function_call .)
    PLUS            reduce using rule 62 (expression -> function_call .)
    MINUS           reduce using rule 62 (expression -> function_call .)
    DIVIDE          reduce using rule 62 (expression -> function_call .)
    TIMES           reduce using rule 62 (expression -> function_call .)
    RPAREN          reduce using rule 62 (expression -> function_call .)
    RBRACKET        reduce using rule 62 (expression -> function_call .)
    GREATER         reduce using rule 62 (expression -> function_call .)
    LESSER          reduce using rule 62 (expression -> function_call .)
    EQUAL           reduce using rule 62 (expression -> function_call .)
    NOTEQUAL        reduce using rule 62 (expression -> function_call .)
    GREATER_EQUAL   reduce using rule 62 (expression -> function_call .)
    LESSER_EQUAL    reduce using rule 62 (expression -> function_call .)
    COMMA           reduce using rule 62 (expression -> function_call .)
    AND             reduce using rule 62 (expression -> function_call .)
    OR              reduce using rule 62 (expression -> function_call .)


state 40

    (63) expression -> variable .
    (13) var_assign -> variable . ASSIGN expression
    (29) increment -> variable . PLUS PLUS
    (30) decrement -> variable . MINUS MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 63 (expression -> variable .)
    DIVIDE          reduce using rule 63 (expression -> variable .)
    TIMES           reduce using rule 63 (expression -> variable .)
    ASSIGN          shift and go to state 76
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78

  ! PLUS            [ reduce using rule 63 (expression -> variable .) ]
  ! MINUS           [ reduce using rule 63 (expression -> variable .) ]


state 41

    (74) print -> STD . NAMESPACE COUT DLEFT expression

    NAMESPACE       shift and go to state 79


state 42

    (18) if_statement -> IF . LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> IF . LPAREN boolean_expr RPAREN var_assign SEMICOLON

    LPAREN          shift and go to state 80


state 43

    (50) literal -> NUMBER .

    SEMICOLON       reduce using rule 50 (literal -> NUMBER .)
    PLUS            reduce using rule 50 (literal -> NUMBER .)
    MINUS           reduce using rule 50 (literal -> NUMBER .)
    DIVIDE          reduce using rule 50 (literal -> NUMBER .)
    TIMES           reduce using rule 50 (literal -> NUMBER .)
    RPAREN          reduce using rule 50 (literal -> NUMBER .)
    RBRACKET        reduce using rule 50 (literal -> NUMBER .)
    GREATER         reduce using rule 50 (literal -> NUMBER .)
    LESSER          reduce using rule 50 (literal -> NUMBER .)
    EQUAL           reduce using rule 50 (literal -> NUMBER .)
    NOTEQUAL        reduce using rule 50 (literal -> NUMBER .)
    GREATER_EQUAL   reduce using rule 50 (literal -> NUMBER .)
    LESSER_EQUAL    reduce using rule 50 (literal -> NUMBER .)
    COMMA           reduce using rule 50 (literal -> NUMBER .)
    AND             reduce using rule 50 (literal -> NUMBER .)
    OR              reduce using rule 50 (literal -> NUMBER .)


state 44

    (51) literal -> STR .

    SEMICOLON       reduce using rule 51 (literal -> STR .)
    PLUS            reduce using rule 51 (literal -> STR .)
    MINUS           reduce using rule 51 (literal -> STR .)
    DIVIDE          reduce using rule 51 (literal -> STR .)
    TIMES           reduce using rule 51 (literal -> STR .)
    RPAREN          reduce using rule 51 (literal -> STR .)
    RBRACKET        reduce using rule 51 (literal -> STR .)
    GREATER         reduce using rule 51 (literal -> STR .)
    LESSER          reduce using rule 51 (literal -> STR .)
    EQUAL           reduce using rule 51 (literal -> STR .)
    NOTEQUAL        reduce using rule 51 (literal -> STR .)
    GREATER_EQUAL   reduce using rule 51 (literal -> STR .)
    LESSER_EQUAL    reduce using rule 51 (literal -> STR .)
    COMMA           reduce using rule 51 (literal -> STR .)
    AND             reduce using rule 51 (literal -> STR .)
    OR              reduce using rule 51 (literal -> STR .)


state 45

    (52) literal -> bool_literal .

    SEMICOLON       reduce using rule 52 (literal -> bool_literal .)
    PLUS            reduce using rule 52 (literal -> bool_literal .)
    MINUS           reduce using rule 52 (literal -> bool_literal .)
    DIVIDE          reduce using rule 52 (literal -> bool_literal .)
    TIMES           reduce using rule 52 (literal -> bool_literal .)
    RPAREN          reduce using rule 52 (literal -> bool_literal .)
    RBRACKET        reduce using rule 52 (literal -> bool_literal .)
    GREATER         reduce using rule 52 (literal -> bool_literal .)
    LESSER          reduce using rule 52 (literal -> bool_literal .)
    EQUAL           reduce using rule 52 (literal -> bool_literal .)
    NOTEQUAL        reduce using rule 52 (literal -> bool_literal .)
    GREATER_EQUAL   reduce using rule 52 (literal -> bool_literal .)
    LESSER_EQUAL    reduce using rule 52 (literal -> bool_literal .)
    COMMA           reduce using rule 52 (literal -> bool_literal .)
    AND             reduce using rule 52 (literal -> bool_literal .)
    OR              reduce using rule 52 (literal -> bool_literal .)


state 46

    (12) variable -> array .

    ASSIGN          reduce using rule 12 (variable -> array .)
    PLUS            reduce using rule 12 (variable -> array .)
    MINUS           reduce using rule 12 (variable -> array .)
    SEMICOLON       reduce using rule 12 (variable -> array .)
    DIVIDE          reduce using rule 12 (variable -> array .)
    TIMES           reduce using rule 12 (variable -> array .)
    RPAREN          reduce using rule 12 (variable -> array .)
    COMMA           reduce using rule 12 (variable -> array .)
    RBRACKET        reduce using rule 12 (variable -> array .)
    GREATER         reduce using rule 12 (variable -> array .)
    LESSER          reduce using rule 12 (variable -> array .)
    EQUAL           reduce using rule 12 (variable -> array .)
    NOTEQUAL        reduce using rule 12 (variable -> array .)
    GREATER_EQUAL   reduce using rule 12 (variable -> array .)
    LESSER_EQUAL    reduce using rule 12 (variable -> array .)
    AND             reduce using rule 12 (variable -> array .)
    OR              reduce using rule 12 (variable -> array .)


state 47

    (53) bool_literal -> TRUE .

    SEMICOLON       reduce using rule 53 (bool_literal -> TRUE .)
    PLUS            reduce using rule 53 (bool_literal -> TRUE .)
    MINUS           reduce using rule 53 (bool_literal -> TRUE .)
    DIVIDE          reduce using rule 53 (bool_literal -> TRUE .)
    TIMES           reduce using rule 53 (bool_literal -> TRUE .)
    RPAREN          reduce using rule 53 (bool_literal -> TRUE .)
    RBRACKET        reduce using rule 53 (bool_literal -> TRUE .)
    GREATER         reduce using rule 53 (bool_literal -> TRUE .)
    LESSER          reduce using rule 53 (bool_literal -> TRUE .)
    EQUAL           reduce using rule 53 (bool_literal -> TRUE .)
    NOTEQUAL        reduce using rule 53 (bool_literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 53 (bool_literal -> TRUE .)
    LESSER_EQUAL    reduce using rule 53 (bool_literal -> TRUE .)
    COMMA           reduce using rule 53 (bool_literal -> TRUE .)
    AND             reduce using rule 53 (bool_literal -> TRUE .)
    OR              reduce using rule 53 (bool_literal -> TRUE .)


state 48

    (54) bool_literal -> FALSE .

    SEMICOLON       reduce using rule 54 (bool_literal -> FALSE .)
    PLUS            reduce using rule 54 (bool_literal -> FALSE .)
    MINUS           reduce using rule 54 (bool_literal -> FALSE .)
    DIVIDE          reduce using rule 54 (bool_literal -> FALSE .)
    TIMES           reduce using rule 54 (bool_literal -> FALSE .)
    RPAREN          reduce using rule 54 (bool_literal -> FALSE .)
    RBRACKET        reduce using rule 54 (bool_literal -> FALSE .)
    GREATER         reduce using rule 54 (bool_literal -> FALSE .)
    LESSER          reduce using rule 54 (bool_literal -> FALSE .)
    EQUAL           reduce using rule 54 (bool_literal -> FALSE .)
    NOTEQUAL        reduce using rule 54 (bool_literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 54 (bool_literal -> FALSE .)
    LESSER_EQUAL    reduce using rule 54 (bool_literal -> FALSE .)
    COMMA           reduce using rule 54 (bool_literal -> FALSE .)
    AND             reduce using rule 54 (bool_literal -> FALSE .)
    OR              reduce using rule 54 (bool_literal -> FALSE .)


state 49

    (14) var_assign -> type variable . ASSIGN expression

    ASSIGN          shift and go to state 81


state 50

    (11) variable -> ID .
    (10) array -> ID . brackets
    (8) brackets -> . LBRACKET index RBRACKET brackets
    (9) brackets -> . LBRACKET index RBRACKET

    ASSIGN          reduce using rule 11 (variable -> ID .)
    COMMA           reduce using rule 11 (variable -> ID .)
    LBRACKET        shift and go to state 53

    brackets                       shift and go to state 52

state 51

    (72) function_call -> ID LPAREN . call_args RPAREN
    (70) call_args -> . variable COMMA call_args
    (71) call_args -> . empty
    (11) variable -> . ID
    (12) variable -> . array
    (73) empty -> .
    (10) array -> . ID brackets

    ID              shift and go to state 50
    RPAREN          reduce using rule 73 (empty -> .)

    call_args                      shift and go to state 82
    variable                       shift and go to state 83
    empty                          shift and go to state 84
    array                          shift and go to state 46

state 52

    (10) array -> ID brackets .

    ASSIGN          reduce using rule 10 (array -> ID brackets .)
    PLUS            reduce using rule 10 (array -> ID brackets .)
    MINUS           reduce using rule 10 (array -> ID brackets .)
    SEMICOLON       reduce using rule 10 (array -> ID brackets .)
    DIVIDE          reduce using rule 10 (array -> ID brackets .)
    TIMES           reduce using rule 10 (array -> ID brackets .)
    RPAREN          reduce using rule 10 (array -> ID brackets .)
    COMMA           reduce using rule 10 (array -> ID brackets .)
    RBRACKET        reduce using rule 10 (array -> ID brackets .)
    GREATER         reduce using rule 10 (array -> ID brackets .)
    LESSER          reduce using rule 10 (array -> ID brackets .)
    EQUAL           reduce using rule 10 (array -> ID brackets .)
    NOTEQUAL        reduce using rule 10 (array -> ID brackets .)
    GREATER_EQUAL   reduce using rule 10 (array -> ID brackets .)
    LESSER_EQUAL    reduce using rule 10 (array -> ID brackets .)
    AND             reduce using rule 10 (array -> ID brackets .)
    OR              reduce using rule 10 (array -> ID brackets .)


state 53

    (8) brackets -> LBRACKET . index RBRACKET brackets
    (9) brackets -> LBRACKET . index RBRACKET
    (5) index -> . variable
    (6) index -> . literal
    (7) index -> . expression
    (11) variable -> . ID
    (12) variable -> . array
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (10) array -> . ID brackets
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (72) function_call -> . ID LPAREN call_args RPAREN

    ID              shift and go to state 89
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 24
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    index                          shift and go to state 85
    variable                       shift and go to state 86
    literal                        shift and go to state 87
    expression                     shift and go to state 88
    array                          shift and go to state 46
    bool_literal                   shift and go to state 45
    function_call                  shift and go to state 39

state 54

    (60) expression -> LPAREN expression . RPAREN
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    RPAREN          shift and go to state 90
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 55

    (63) expression -> variable .

    RPAREN          reduce using rule 63 (expression -> variable .)
    PLUS            reduce using rule 63 (expression -> variable .)
    MINUS           reduce using rule 63 (expression -> variable .)
    DIVIDE          reduce using rule 63 (expression -> variable .)
    TIMES           reduce using rule 63 (expression -> variable .)
    SEMICOLON       reduce using rule 63 (expression -> variable .)
    RBRACKET        reduce using rule 63 (expression -> variable .)
    GREATER         reduce using rule 63 (expression -> variable .)
    LESSER          reduce using rule 63 (expression -> variable .)
    EQUAL           reduce using rule 63 (expression -> variable .)
    NOTEQUAL        reduce using rule 63 (expression -> variable .)
    GREATER_EQUAL   reduce using rule 63 (expression -> variable .)
    LESSER_EQUAL    reduce using rule 63 (expression -> variable .)
    COMMA           reduce using rule 63 (expression -> variable .)
    AND             reduce using rule 63 (expression -> variable .)
    OR              reduce using rule 63 (expression -> variable .)


state 56

    (69) function -> type ID LPAREN RPAREN LBRACE body RBRACE .

    INCLUDE         reduce using rule 69 (function -> type ID LPAREN RPAREN LBRACE body RBRACE .)
    COMMENT         reduce using rule 69 (function -> type ID LPAREN RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 69 (function -> type ID LPAREN RPAREN LBRACE body RBRACE .)
    DOUBLE          reduce using rule 69 (function -> type ID LPAREN RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 69 (function -> type ID LPAREN RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 69 (function -> type ID LPAREN RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 69 (function -> type ID LPAREN RPAREN LBRACE body RBRACE .)


state 57

    (75) body -> while_loop body .

    RBRACE          reduce using rule 75 (body -> while_loop body .)


state 58

    (76) body -> for_loop body .

    RBRACE          reduce using rule 76 (body -> for_loop body .)


state 59

    (77) body -> if_else_statement body .

    RBRACE          reduce using rule 77 (body -> if_else_statement body .)


state 60

    (78) body -> expression SEMICOLON . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expression                     shift and go to state 29
    body                           shift and go to state 91
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 61

    (59) expression -> expression operator . expression
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expression                     shift and go to state 92
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 62

    (38) operator -> PLUS .

    LPAREN          reduce using rule 38 (operator -> PLUS .)
    NUMBER          reduce using rule 38 (operator -> PLUS .)
    STR             reduce using rule 38 (operator -> PLUS .)
    ID              reduce using rule 38 (operator -> PLUS .)
    TRUE            reduce using rule 38 (operator -> PLUS .)
    FALSE           reduce using rule 38 (operator -> PLUS .)


state 63

    (39) operator -> MINUS .

    LPAREN          reduce using rule 39 (operator -> MINUS .)
    NUMBER          reduce using rule 39 (operator -> MINUS .)
    STR             reduce using rule 39 (operator -> MINUS .)
    ID              reduce using rule 39 (operator -> MINUS .)
    TRUE            reduce using rule 39 (operator -> MINUS .)
    FALSE           reduce using rule 39 (operator -> MINUS .)


state 64

    (40) operator -> DIVIDE .

    LPAREN          reduce using rule 40 (operator -> DIVIDE .)
    NUMBER          reduce using rule 40 (operator -> DIVIDE .)
    STR             reduce using rule 40 (operator -> DIVIDE .)
    ID              reduce using rule 40 (operator -> DIVIDE .)
    TRUE            reduce using rule 40 (operator -> DIVIDE .)
    FALSE           reduce using rule 40 (operator -> DIVIDE .)


state 65

    (41) operator -> TIMES .

    LPAREN          reduce using rule 41 (operator -> TIMES .)
    NUMBER          reduce using rule 41 (operator -> TIMES .)
    STR             reduce using rule 41 (operator -> TIMES .)
    ID              reduce using rule 41 (operator -> TIMES .)
    TRUE            reduce using rule 41 (operator -> TIMES .)
    FALSE           reduce using rule 41 (operator -> TIMES .)


state 66

    (79) body -> var_assign SEMICOLON . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    var_assign                     shift and go to state 30
    body                           shift and go to state 93
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 67

    (80) body -> print SEMICOLON . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    print                          shift and go to state 31
    body                           shift and go to state 94
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 68

    (81) body -> increment SEMICOLON . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    increment                      shift and go to state 32
    body                           shift and go to state 95
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 69

    (82) body -> decrement SEMICOLON . body
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    decrement                      shift and go to state 33
    body                           shift and go to state 96
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 70

    (25) while_loop -> WHILE LPAREN . boolean_expr RPAREN LBRACE body RBRACE
    (64) boolean_expr -> . expression compare_op expression
    (65) boolean_expr -> . NOT boolean_expr
    (66) boolean_expr -> . boolean_expr bool_op boolean_expr
    (67) boolean_expr -> . LPAREN boolean_expr RPAREN
    (68) boolean_expr -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    NOT             shift and go to state 100
    LPAREN          shift and go to state 97
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23

    boolean_expr                   shift and go to state 98
    expression                     shift and go to state 99
    bool_literal                   shift and go to state 101
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    array                          shift and go to state 46

state 71

    (34) for_loop -> FOR LPAREN . for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (26) for_assign -> . var_assign COMMA for_assign
    (27) for_assign -> . var_assign
    (28) for_assign -> . empty
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (73) empty -> .
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (10) array -> . ID brackets

    SEMICOLON       reduce using rule 73 (empty -> .)
    ID              shift and go to state 50
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

    for_assign                     shift and go to state 102
    var_assign                     shift and go to state 103
    empty                          shift and go to state 104
    variable                       shift and go to state 105
    type                           shift and go to state 22
    array                          shift and go to state 46

state 72

    (16) if_else_statement -> if_statement else_if_statement . else_statement
    (23) else_statement -> . ELSE LBRACE body RBRACE
    (24) else_statement -> . ELSE var_assign SEMICOLON

    ELSE            shift and go to state 107

    else_statement                 shift and go to state 106

state 73

    (17) if_else_statement -> if_statement else_statement .

    WHILE           reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    FOR             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    LPAREN          reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    STD             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    IF              reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    NUMBER          reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    STR             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    ID              reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    INT             reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    DOUBLE          reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    STRING          reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    BOOL            reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    TRUE            reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    FALSE           reduce using rule 17 (if_else_statement -> if_statement else_statement .)
    RBRACE          reduce using rule 17 (if_else_statement -> if_statement else_statement .)


state 74

    (20) else_if_statement -> ELSE . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> ELSE . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (23) else_statement -> ELSE . LBRACE body RBRACE
    (24) else_statement -> ELSE . var_assign SEMICOLON
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (10) array -> . ID brackets

    IF              shift and go to state 108
    LBRACE          shift and go to state 109
    ID              shift and go to state 50
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

    var_assign                     shift and go to state 110
    variable                       shift and go to state 105
    type                           shift and go to state 22
    array                          shift and go to state 46

state 75

    (22) else_if_statement -> empty .

    ELSE            reduce using rule 22 (else_if_statement -> empty .)


state 76

    (13) var_assign -> variable ASSIGN . expression
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    variable                       shift and go to state 55
    expression                     shift and go to state 111
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 77

    (29) increment -> variable PLUS . PLUS

    PLUS            shift and go to state 112


state 78

    (30) decrement -> variable MINUS . MINUS

    MINUS           shift and go to state 113


state 79

    (74) print -> STD NAMESPACE . COUT DLEFT expression

    COUT            shift and go to state 114


state 80

    (18) if_statement -> IF LPAREN . boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> IF LPAREN . boolean_expr RPAREN var_assign SEMICOLON
    (64) boolean_expr -> . expression compare_op expression
    (65) boolean_expr -> . NOT boolean_expr
    (66) boolean_expr -> . boolean_expr bool_op boolean_expr
    (67) boolean_expr -> . LPAREN boolean_expr RPAREN
    (68) boolean_expr -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    NOT             shift and go to state 100
    LPAREN          shift and go to state 97
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23

    boolean_expr                   shift and go to state 115
    expression                     shift and go to state 99
    bool_literal                   shift and go to state 101
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    array                          shift and go to state 46

state 81

    (14) var_assign -> type variable ASSIGN . expression
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    variable                       shift and go to state 55
    expression                     shift and go to state 116
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 82

    (72) function_call -> ID LPAREN call_args . RPAREN

    RPAREN          shift and go to state 117


state 83

    (70) call_args -> variable . COMMA call_args

    COMMA           shift and go to state 118


state 84

    (71) call_args -> empty .

    RPAREN          reduce using rule 71 (call_args -> empty .)


state 85

    (8) brackets -> LBRACKET index . RBRACKET brackets
    (9) brackets -> LBRACKET index . RBRACKET

    RBRACKET        shift and go to state 119


state 86

    (5) index -> variable .
    (63) expression -> variable .

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (index -> variable .)
    RBRACKET        reduce using rule 5 (index -> variable .)
    PLUS            reduce using rule 63 (expression -> variable .)
    MINUS           reduce using rule 63 (expression -> variable .)
    DIVIDE          reduce using rule 63 (expression -> variable .)
    TIMES           reduce using rule 63 (expression -> variable .)

  ! RBRACKET        [ reduce using rule 63 (expression -> variable .) ]


state 87

    (6) index -> literal .
    (61) expression -> literal .

  ! reduce/reduce conflict for RBRACKET resolved using rule 6 (index -> literal .)
    RBRACKET        reduce using rule 6 (index -> literal .)
    PLUS            reduce using rule 61 (expression -> literal .)
    MINUS           reduce using rule 61 (expression -> literal .)
    DIVIDE          reduce using rule 61 (expression -> literal .)
    TIMES           reduce using rule 61 (expression -> literal .)

  ! RBRACKET        [ reduce using rule 61 (expression -> literal .) ]


state 88

    (7) index -> expression .
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    RBRACKET        reduce using rule 7 (index -> expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 89

    (11) variable -> ID .
    (10) array -> ID . brackets
    (72) function_call -> ID . LPAREN call_args RPAREN
    (8) brackets -> . LBRACKET index RBRACKET brackets
    (9) brackets -> . LBRACKET index RBRACKET

    RBRACKET        reduce using rule 11 (variable -> ID .)
    PLUS            reduce using rule 11 (variable -> ID .)
    MINUS           reduce using rule 11 (variable -> ID .)
    DIVIDE          reduce using rule 11 (variable -> ID .)
    TIMES           reduce using rule 11 (variable -> ID .)
    LPAREN          shift and go to state 51
    LBRACKET        shift and go to state 53

    brackets                       shift and go to state 52

state 90

    (60) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LESSER          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LESSER_EQUAL    reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 60 (expression -> LPAREN expression RPAREN .)


state 91

    (78) body -> expression SEMICOLON body .

    RBRACE          reduce using rule 78 (body -> expression SEMICOLON body .)


state 92

    (59) expression -> expression operator expression .
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    SEMICOLON       reduce using rule 59 (expression -> expression operator expression .)
    RPAREN          reduce using rule 59 (expression -> expression operator expression .)
    RBRACKET        reduce using rule 59 (expression -> expression operator expression .)
    GREATER         reduce using rule 59 (expression -> expression operator expression .)
    LESSER          reduce using rule 59 (expression -> expression operator expression .)
    EQUAL           reduce using rule 59 (expression -> expression operator expression .)
    NOTEQUAL        reduce using rule 59 (expression -> expression operator expression .)
    GREATER_EQUAL   reduce using rule 59 (expression -> expression operator expression .)
    LESSER_EQUAL    reduce using rule 59 (expression -> expression operator expression .)
    COMMA           reduce using rule 59 (expression -> expression operator expression .)
    AND             reduce using rule 59 (expression -> expression operator expression .)
    OR              reduce using rule 59 (expression -> expression operator expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

  ! PLUS            [ reduce using rule 59 (expression -> expression operator expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression operator expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression operator expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression operator expression .) ]

    operator                       shift and go to state 61

state 93

    (79) body -> var_assign SEMICOLON body .

    RBRACE          reduce using rule 79 (body -> var_assign SEMICOLON body .)


state 94

    (80) body -> print SEMICOLON body .

    RBRACE          reduce using rule 80 (body -> print SEMICOLON body .)


state 95

    (81) body -> increment SEMICOLON body .

    RBRACE          reduce using rule 81 (body -> increment SEMICOLON body .)


state 96

    (82) body -> decrement SEMICOLON body .

    RBRACE          reduce using rule 82 (body -> decrement SEMICOLON body .)


state 97

    (67) boolean_expr -> LPAREN . boolean_expr RPAREN
    (60) expression -> LPAREN . expression RPAREN
    (64) boolean_expr -> . expression compare_op expression
    (65) boolean_expr -> . NOT boolean_expr
    (66) boolean_expr -> . boolean_expr bool_op boolean_expr
    (67) boolean_expr -> . LPAREN boolean_expr RPAREN
    (68) boolean_expr -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    NOT             shift and go to state 100
    LPAREN          shift and go to state 97
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23

    boolean_expr                   shift and go to state 120
    expression                     shift and go to state 121
    bool_literal                   shift and go to state 101
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    array                          shift and go to state 46

state 98

    (25) while_loop -> WHILE LPAREN boolean_expr . RPAREN LBRACE body RBRACE
    (66) boolean_expr -> boolean_expr . bool_op boolean_expr
    (42) bool_op -> . AND
    (43) bool_op -> . OR

    RPAREN          shift and go to state 122
    AND             shift and go to state 124
    OR              shift and go to state 125

    bool_op                        shift and go to state 123

state 99

    (64) boolean_expr -> expression . compare_op expression
    (59) expression -> expression . operator expression
    (44) compare_op -> . GREATER
    (45) compare_op -> . LESSER
    (46) compare_op -> . EQUAL
    (47) compare_op -> . NOTEQUAL
    (48) compare_op -> . GREATER_EQUAL
    (49) compare_op -> . LESSER_EQUAL
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    GREATER         shift and go to state 127
    LESSER          shift and go to state 128
    EQUAL           shift and go to state 129
    NOTEQUAL        shift and go to state 130
    GREATER_EQUAL   shift and go to state 131
    LESSER_EQUAL    shift and go to state 132
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    compare_op                     shift and go to state 126
    operator                       shift and go to state 61

state 100

    (65) boolean_expr -> NOT . boolean_expr
    (64) boolean_expr -> . expression compare_op expression
    (65) boolean_expr -> . NOT boolean_expr
    (66) boolean_expr -> . boolean_expr bool_op boolean_expr
    (67) boolean_expr -> . LPAREN boolean_expr RPAREN
    (68) boolean_expr -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    NOT             shift and go to state 100
    LPAREN          shift and go to state 97
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23

    boolean_expr                   shift and go to state 133
    expression                     shift and go to state 99
    bool_literal                   shift and go to state 101
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    array                          shift and go to state 46

state 101

    (68) boolean_expr -> bool_literal .
    (52) literal -> bool_literal .

  ! reduce/reduce conflict for RPAREN resolved using rule 52 (literal -> bool_literal .)
    AND             reduce using rule 68 (boolean_expr -> bool_literal .)
    OR              reduce using rule 68 (boolean_expr -> bool_literal .)
    SEMICOLON       reduce using rule 68 (boolean_expr -> bool_literal .)
    GREATER         reduce using rule 52 (literal -> bool_literal .)
    LESSER          reduce using rule 52 (literal -> bool_literal .)
    EQUAL           reduce using rule 52 (literal -> bool_literal .)
    NOTEQUAL        reduce using rule 52 (literal -> bool_literal .)
    GREATER_EQUAL   reduce using rule 52 (literal -> bool_literal .)
    LESSER_EQUAL    reduce using rule 52 (literal -> bool_literal .)
    PLUS            reduce using rule 52 (literal -> bool_literal .)
    MINUS           reduce using rule 52 (literal -> bool_literal .)
    DIVIDE          reduce using rule 52 (literal -> bool_literal .)
    TIMES           reduce using rule 52 (literal -> bool_literal .)
    RPAREN          reduce using rule 52 (literal -> bool_literal .)

  ! RPAREN          [ reduce using rule 68 (boolean_expr -> bool_literal .) ]


state 102

    (34) for_loop -> FOR LPAREN for_assign . SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE

    SEMICOLON       shift and go to state 134


state 103

    (26) for_assign -> var_assign . COMMA for_assign
    (27) for_assign -> var_assign .

    COMMA           shift and go to state 135
    SEMICOLON       reduce using rule 27 (for_assign -> var_assign .)


state 104

    (28) for_assign -> empty .

    SEMICOLON       reduce using rule 28 (for_assign -> empty .)


state 105

    (13) var_assign -> variable . ASSIGN expression

    ASSIGN          shift and go to state 76


state 106

    (16) if_else_statement -> if_statement else_if_statement else_statement .

    WHILE           reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    FOR             reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    LPAREN          reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    STD             reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    IF              reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    NUMBER          reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    STR             reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    ID              reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    INT             reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    DOUBLE          reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    STRING          reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    BOOL            reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    TRUE            reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    FALSE           reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)
    RBRACE          reduce using rule 16 (if_else_statement -> if_statement else_if_statement else_statement .)


state 107

    (23) else_statement -> ELSE . LBRACE body RBRACE
    (24) else_statement -> ELSE . var_assign SEMICOLON
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (10) array -> . ID brackets

    LBRACE          shift and go to state 109
    ID              shift and go to state 50
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

    var_assign                     shift and go to state 110
    variable                       shift and go to state 105
    type                           shift and go to state 22
    array                          shift and go to state 46

state 108

    (20) else_if_statement -> ELSE IF . LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> ELSE IF . LPAREN boolean_expr RPAREN var_assign SEMICOLON

    LPAREN          shift and go to state 136


state 109

    (23) else_statement -> ELSE LBRACE . body RBRACE
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    body                           shift and go to state 137
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 110

    (24) else_statement -> ELSE var_assign . SEMICOLON

    SEMICOLON       shift and go to state 138


state 111

    (13) var_assign -> variable ASSIGN expression .
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    SEMICOLON       reduce using rule 13 (var_assign -> variable ASSIGN expression .)
    COMMA           reduce using rule 13 (var_assign -> variable ASSIGN expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 112

    (29) increment -> variable PLUS PLUS .

    SEMICOLON       reduce using rule 29 (increment -> variable PLUS PLUS .)


state 113

    (30) decrement -> variable MINUS MINUS .

    SEMICOLON       reduce using rule 30 (decrement -> variable MINUS MINUS .)


state 114

    (74) print -> STD NAMESPACE COUT . DLEFT expression

    DLEFT           shift and go to state 139


state 115

    (18) if_statement -> IF LPAREN boolean_expr . RPAREN LBRACE body RBRACE
    (19) if_statement -> IF LPAREN boolean_expr . RPAREN var_assign SEMICOLON
    (66) boolean_expr -> boolean_expr . bool_op boolean_expr
    (42) bool_op -> . AND
    (43) bool_op -> . OR

    RPAREN          shift and go to state 140
    AND             shift and go to state 124
    OR              shift and go to state 125

    bool_op                        shift and go to state 123

state 116

    (14) var_assign -> type variable ASSIGN expression .
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    SEMICOLON       reduce using rule 14 (var_assign -> type variable ASSIGN expression .)
    COMMA           reduce using rule 14 (var_assign -> type variable ASSIGN expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 117

    (72) function_call -> ID LPAREN call_args RPAREN .

    SEMICOLON       reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    PLUS            reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    MINUS           reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    DIVIDE          reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    TIMES           reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    RBRACKET        reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    GREATER         reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    LESSER          reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    EQUAL           reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    NOTEQUAL        reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    GREATER_EQUAL   reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    LESSER_EQUAL    reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    COMMA           reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    AND             reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)
    OR              reduce using rule 72 (function_call -> ID LPAREN call_args RPAREN .)


state 118

    (70) call_args -> variable COMMA . call_args
    (70) call_args -> . variable COMMA call_args
    (71) call_args -> . empty
    (11) variable -> . ID
    (12) variable -> . array
    (73) empty -> .
    (10) array -> . ID brackets

    ID              shift and go to state 50
    RPAREN          reduce using rule 73 (empty -> .)

    variable                       shift and go to state 83
    call_args                      shift and go to state 141
    empty                          shift and go to state 84
    array                          shift and go to state 46

state 119

    (8) brackets -> LBRACKET index RBRACKET . brackets
    (9) brackets -> LBRACKET index RBRACKET .
    (8) brackets -> . LBRACKET index RBRACKET brackets
    (9) brackets -> . LBRACKET index RBRACKET

    ASSIGN          reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    PLUS            reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    MINUS           reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    SEMICOLON       reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    DIVIDE          reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    TIMES           reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    RPAREN          reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    RBRACKET        reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    GREATER         reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    LESSER          reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    EQUAL           reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    NOTEQUAL        reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    GREATER_EQUAL   reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    LESSER_EQUAL    reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    COMMA           reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    AND             reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    OR              reduce using rule 9 (brackets -> LBRACKET index RBRACKET .)
    LBRACKET        shift and go to state 53

    brackets                       shift and go to state 142

state 120

    (67) boolean_expr -> LPAREN boolean_expr . RPAREN
    (66) boolean_expr -> boolean_expr . bool_op boolean_expr
    (42) bool_op -> . AND
    (43) bool_op -> . OR

    RPAREN          shift and go to state 143
    AND             shift and go to state 124
    OR              shift and go to state 125

    bool_op                        shift and go to state 123

state 121

    (60) expression -> LPAREN expression . RPAREN
    (64) boolean_expr -> expression . compare_op expression
    (59) expression -> expression . operator expression
    (44) compare_op -> . GREATER
    (45) compare_op -> . LESSER
    (46) compare_op -> . EQUAL
    (47) compare_op -> . NOTEQUAL
    (48) compare_op -> . GREATER_EQUAL
    (49) compare_op -> . LESSER_EQUAL
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    RPAREN          shift and go to state 90
    GREATER         shift and go to state 127
    LESSER          shift and go to state 128
    EQUAL           shift and go to state 129
    NOTEQUAL        shift and go to state 130
    GREATER_EQUAL   shift and go to state 131
    LESSER_EQUAL    shift and go to state 132
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    compare_op                     shift and go to state 126
    operator                       shift and go to state 61

state 122

    (25) while_loop -> WHILE LPAREN boolean_expr RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 144


state 123

    (66) boolean_expr -> boolean_expr bool_op . boolean_expr
    (64) boolean_expr -> . expression compare_op expression
    (65) boolean_expr -> . NOT boolean_expr
    (66) boolean_expr -> . boolean_expr bool_op boolean_expr
    (67) boolean_expr -> . LPAREN boolean_expr RPAREN
    (68) boolean_expr -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    NOT             shift and go to state 100
    LPAREN          shift and go to state 97
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23

    boolean_expr                   shift and go to state 145
    expression                     shift and go to state 99
    bool_literal                   shift and go to state 101
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    array                          shift and go to state 46

state 124

    (42) bool_op -> AND .

    NOT             reduce using rule 42 (bool_op -> AND .)
    LPAREN          reduce using rule 42 (bool_op -> AND .)
    TRUE            reduce using rule 42 (bool_op -> AND .)
    FALSE           reduce using rule 42 (bool_op -> AND .)
    NUMBER          reduce using rule 42 (bool_op -> AND .)
    STR             reduce using rule 42 (bool_op -> AND .)
    ID              reduce using rule 42 (bool_op -> AND .)


state 125

    (43) bool_op -> OR .

    NOT             reduce using rule 43 (bool_op -> OR .)
    LPAREN          reduce using rule 43 (bool_op -> OR .)
    TRUE            reduce using rule 43 (bool_op -> OR .)
    FALSE           reduce using rule 43 (bool_op -> OR .)
    NUMBER          reduce using rule 43 (bool_op -> OR .)
    STR             reduce using rule 43 (bool_op -> OR .)
    ID              reduce using rule 43 (bool_op -> OR .)


state 126

    (64) boolean_expr -> expression compare_op . expression
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expression                     shift and go to state 146
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 127

    (44) compare_op -> GREATER .

    LPAREN          reduce using rule 44 (compare_op -> GREATER .)
    NUMBER          reduce using rule 44 (compare_op -> GREATER .)
    STR             reduce using rule 44 (compare_op -> GREATER .)
    ID              reduce using rule 44 (compare_op -> GREATER .)
    TRUE            reduce using rule 44 (compare_op -> GREATER .)
    FALSE           reduce using rule 44 (compare_op -> GREATER .)


state 128

    (45) compare_op -> LESSER .

    LPAREN          reduce using rule 45 (compare_op -> LESSER .)
    NUMBER          reduce using rule 45 (compare_op -> LESSER .)
    STR             reduce using rule 45 (compare_op -> LESSER .)
    ID              reduce using rule 45 (compare_op -> LESSER .)
    TRUE            reduce using rule 45 (compare_op -> LESSER .)
    FALSE           reduce using rule 45 (compare_op -> LESSER .)


state 129

    (46) compare_op -> EQUAL .

    LPAREN          reduce using rule 46 (compare_op -> EQUAL .)
    NUMBER          reduce using rule 46 (compare_op -> EQUAL .)
    STR             reduce using rule 46 (compare_op -> EQUAL .)
    ID              reduce using rule 46 (compare_op -> EQUAL .)
    TRUE            reduce using rule 46 (compare_op -> EQUAL .)
    FALSE           reduce using rule 46 (compare_op -> EQUAL .)


state 130

    (47) compare_op -> NOTEQUAL .

    LPAREN          reduce using rule 47 (compare_op -> NOTEQUAL .)
    NUMBER          reduce using rule 47 (compare_op -> NOTEQUAL .)
    STR             reduce using rule 47 (compare_op -> NOTEQUAL .)
    ID              reduce using rule 47 (compare_op -> NOTEQUAL .)
    TRUE            reduce using rule 47 (compare_op -> NOTEQUAL .)
    FALSE           reduce using rule 47 (compare_op -> NOTEQUAL .)


state 131

    (48) compare_op -> GREATER_EQUAL .

    LPAREN          reduce using rule 48 (compare_op -> GREATER_EQUAL .)
    NUMBER          reduce using rule 48 (compare_op -> GREATER_EQUAL .)
    STR             reduce using rule 48 (compare_op -> GREATER_EQUAL .)
    ID              reduce using rule 48 (compare_op -> GREATER_EQUAL .)
    TRUE            reduce using rule 48 (compare_op -> GREATER_EQUAL .)
    FALSE           reduce using rule 48 (compare_op -> GREATER_EQUAL .)


state 132

    (49) compare_op -> LESSER_EQUAL .

    LPAREN          reduce using rule 49 (compare_op -> LESSER_EQUAL .)
    NUMBER          reduce using rule 49 (compare_op -> LESSER_EQUAL .)
    STR             reduce using rule 49 (compare_op -> LESSER_EQUAL .)
    ID              reduce using rule 49 (compare_op -> LESSER_EQUAL .)
    TRUE            reduce using rule 49 (compare_op -> LESSER_EQUAL .)
    FALSE           reduce using rule 49 (compare_op -> LESSER_EQUAL .)


state 133

    (65) boolean_expr -> NOT boolean_expr .
    (66) boolean_expr -> boolean_expr . bool_op boolean_expr
    (42) bool_op -> . AND
    (43) bool_op -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 65 (boolean_expr -> NOT boolean_expr .)
    SEMICOLON       reduce using rule 65 (boolean_expr -> NOT boolean_expr .)
    AND             shift and go to state 124
    OR              shift and go to state 125

  ! AND             [ reduce using rule 65 (boolean_expr -> NOT boolean_expr .) ]
  ! OR              [ reduce using rule 65 (boolean_expr -> NOT boolean_expr .) ]

    bool_op                        shift and go to state 123

state 134

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON . boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (64) boolean_expr -> . expression compare_op expression
    (65) boolean_expr -> . NOT boolean_expr
    (66) boolean_expr -> . boolean_expr bool_op boolean_expr
    (67) boolean_expr -> . LPAREN boolean_expr RPAREN
    (68) boolean_expr -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    NOT             shift and go to state 100
    LPAREN          shift and go to state 97
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23

    boolean_expr                   shift and go to state 147
    expression                     shift and go to state 99
    bool_literal                   shift and go to state 101
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    array                          shift and go to state 46

state 135

    (26) for_assign -> var_assign COMMA . for_assign
    (26) for_assign -> . var_assign COMMA for_assign
    (27) for_assign -> . var_assign
    (28) for_assign -> . empty
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (73) empty -> .
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (10) array -> . ID brackets

    SEMICOLON       reduce using rule 73 (empty -> .)
    ID              shift and go to state 50
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

    var_assign                     shift and go to state 103
    for_assign                     shift and go to state 148
    empty                          shift and go to state 104
    variable                       shift and go to state 105
    type                           shift and go to state 22
    array                          shift and go to state 46

state 136

    (20) else_if_statement -> ELSE IF LPAREN . boolean_expr RPAREN LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> ELSE IF LPAREN . boolean_expr RPAREN var_assign SEMICOLON
    (64) boolean_expr -> . expression compare_op expression
    (65) boolean_expr -> . NOT boolean_expr
    (66) boolean_expr -> . boolean_expr bool_op boolean_expr
    (67) boolean_expr -> . LPAREN boolean_expr RPAREN
    (68) boolean_expr -> . bool_literal
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (10) array -> . ID brackets

    NOT             shift and go to state 100
    LPAREN          shift and go to state 97
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23

    boolean_expr                   shift and go to state 149
    expression                     shift and go to state 99
    bool_literal                   shift and go to state 101
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    array                          shift and go to state 46

state 137

    (23) else_statement -> ELSE LBRACE body . RBRACE

    RBRACE          shift and go to state 150


state 138

    (24) else_statement -> ELSE var_assign SEMICOLON .

    WHILE           reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    FOR             reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    LPAREN          reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    STD             reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    IF              reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    NUMBER          reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    STR             reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    ID              reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    INT             reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    DOUBLE          reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    STRING          reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    BOOL            reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    TRUE            reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    FALSE           reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)
    RBRACE          reduce using rule 24 (else_statement -> ELSE var_assign SEMICOLON .)


state 139

    (74) print -> STD NAMESPACE COUT DLEFT . expression
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expression                     shift and go to state 151
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 140

    (18) if_statement -> IF LPAREN boolean_expr RPAREN . LBRACE body RBRACE
    (19) if_statement -> IF LPAREN boolean_expr RPAREN . var_assign SEMICOLON
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (10) array -> . ID brackets

    LBRACE          shift and go to state 152
    ID              shift and go to state 50
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

    var_assign                     shift and go to state 153
    variable                       shift and go to state 105
    type                           shift and go to state 22
    array                          shift and go to state 46

state 141

    (70) call_args -> variable COMMA call_args .

    RPAREN          reduce using rule 70 (call_args -> variable COMMA call_args .)


state 142

    (8) brackets -> LBRACKET index RBRACKET brackets .

    ASSIGN          reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    PLUS            reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    MINUS           reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    SEMICOLON       reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    DIVIDE          reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    TIMES           reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    RPAREN          reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    RBRACKET        reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    GREATER         reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    LESSER          reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    EQUAL           reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    NOTEQUAL        reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    GREATER_EQUAL   reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    LESSER_EQUAL    reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    COMMA           reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    AND             reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)
    OR              reduce using rule 8 (brackets -> LBRACKET index RBRACKET brackets .)


state 143

    (67) boolean_expr -> LPAREN boolean_expr RPAREN .

    RPAREN          reduce using rule 67 (boolean_expr -> LPAREN boolean_expr RPAREN .)
    AND             reduce using rule 67 (boolean_expr -> LPAREN boolean_expr RPAREN .)
    OR              reduce using rule 67 (boolean_expr -> LPAREN boolean_expr RPAREN .)
    SEMICOLON       reduce using rule 67 (boolean_expr -> LPAREN boolean_expr RPAREN .)


state 144

    (25) while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE . body RBRACE
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    body                           shift and go to state 154
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 145

    (66) boolean_expr -> boolean_expr bool_op boolean_expr .
    (66) boolean_expr -> boolean_expr . bool_op boolean_expr
    (42) bool_op -> . AND
    (43) bool_op -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 66 (boolean_expr -> boolean_expr bool_op boolean_expr .)
    SEMICOLON       reduce using rule 66 (boolean_expr -> boolean_expr bool_op boolean_expr .)
    AND             shift and go to state 124
    OR              shift and go to state 125

  ! AND             [ reduce using rule 66 (boolean_expr -> boolean_expr bool_op boolean_expr .) ]
  ! OR              [ reduce using rule 66 (boolean_expr -> boolean_expr bool_op boolean_expr .) ]

    bool_op                        shift and go to state 123

state 146

    (64) boolean_expr -> expression compare_op expression .
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    RPAREN          reduce using rule 64 (boolean_expr -> expression compare_op expression .)
    AND             reduce using rule 64 (boolean_expr -> expression compare_op expression .)
    OR              reduce using rule 64 (boolean_expr -> expression compare_op expression .)
    SEMICOLON       reduce using rule 64 (boolean_expr -> expression compare_op expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 147

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr . SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (66) boolean_expr -> boolean_expr . bool_op boolean_expr
    (42) bool_op -> . AND
    (43) bool_op -> . OR

    SEMICOLON       shift and go to state 155
    AND             shift and go to state 124
    OR              shift and go to state 125

    bool_op                        shift and go to state 123

state 148

    (26) for_assign -> var_assign COMMA for_assign .

    SEMICOLON       reduce using rule 26 (for_assign -> var_assign COMMA for_assign .)


state 149

    (20) else_if_statement -> ELSE IF LPAREN boolean_expr . RPAREN LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> ELSE IF LPAREN boolean_expr . RPAREN var_assign SEMICOLON
    (66) boolean_expr -> boolean_expr . bool_op boolean_expr
    (42) bool_op -> . AND
    (43) bool_op -> . OR

    RPAREN          shift and go to state 156
    AND             shift and go to state 124
    OR              shift and go to state 125

    bool_op                        shift and go to state 123

state 150

    (23) else_statement -> ELSE LBRACE body RBRACE .

    WHILE           reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    FOR             reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    LPAREN          reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    STD             reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    IF              reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    NUMBER          reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    STR             reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    ID              reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    INT             reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    DOUBLE          reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    STRING          reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    BOOL            reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    TRUE            reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    FALSE           reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)
    RBRACE          reduce using rule 23 (else_statement -> ELSE LBRACE body RBRACE .)


state 151

    (74) print -> STD NAMESPACE COUT DLEFT expression .
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    SEMICOLON       reduce using rule 74 (print -> STD NAMESPACE COUT DLEFT expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 152

    (18) if_statement -> IF LPAREN boolean_expr RPAREN LBRACE . body RBRACE
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    body                           shift and go to state 157
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 153

    (19) if_statement -> IF LPAREN boolean_expr RPAREN var_assign . SEMICOLON

    SEMICOLON       shift and go to state 158


state 154

    (25) while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 159


state 155

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON . for_iteration RPAREN LBRACE body RBRACE
    (31) for_iteration -> . expression COMMA for_iteration
    (32) for_iteration -> . expression
    (33) for_iteration -> . empty
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (73) empty -> .
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    RPAREN          reduce using rule 73 (empty -> .)
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    for_iteration                  shift and go to state 160
    expression                     shift and go to state 161
    empty                          shift and go to state 162
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 156

    (20) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN . LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN . var_assign SEMICOLON
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (10) array -> . ID brackets

    LBRACE          shift and go to state 163
    ID              shift and go to state 50
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12

    var_assign                     shift and go to state 164
    variable                       shift and go to state 105
    type                           shift and go to state 22
    array                          shift and go to state 46

state 157

    (18) if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 165


state 158

    (19) if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .

    ELSE            reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    WHILE           reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    FOR             reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    LPAREN          reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    STD             reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    IF              reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    NUMBER          reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    STR             reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    ID              reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    INT             reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    DOUBLE          reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    STRING          reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    BOOL            reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    TRUE            reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    FALSE           reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)
    RBRACE          reduce using rule 19 (if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)


state 159

    (25) while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .

    WHILE           reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    STD             reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    NUMBER          reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    STR             reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    DOUBLE          reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    TRUE            reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    FALSE           reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 25 (while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE .)


state 160

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 166


state 161

    (31) for_iteration -> expression . COMMA for_iteration
    (32) for_iteration -> expression .
    (59) expression -> expression . operator expression
    (38) operator -> . PLUS
    (39) operator -> . MINUS
    (40) operator -> . DIVIDE
    (41) operator -> . TIMES

    COMMA           shift and go to state 167
    RPAREN          reduce using rule 32 (for_iteration -> expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    DIVIDE          shift and go to state 64
    TIMES           shift and go to state 65

    operator                       shift and go to state 61

state 162

    (33) for_iteration -> empty .

    RPAREN          reduce using rule 33 (for_iteration -> empty .)


state 163

    (20) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE . body RBRACE else_if_statement
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    body                           shift and go to state 168
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 164

    (21) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN var_assign . SEMICOLON

    SEMICOLON       shift and go to state 169


state 165

    (18) if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .

    ELSE            reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    STD             reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    NUMBER          reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    STR             reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    DOUBLE          reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    TRUE            reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    FALSE           reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 18 (if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE .)


state 166

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 170


state 167

    (31) for_iteration -> expression COMMA . for_iteration
    (31) for_iteration -> . expression COMMA for_iteration
    (32) for_iteration -> . expression
    (33) for_iteration -> . empty
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (73) empty -> .
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    LPAREN          shift and go to state 24
    RPAREN          reduce using rule 73 (empty -> .)
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expression                     shift and go to state 161
    for_iteration                  shift and go to state 171
    empty                          shift and go to state 162
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 55
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 168

    (20) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE body . RBRACE else_if_statement

    RBRACE          shift and go to state 172


state 169

    (21) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .

    ELSE            reduce using rule 21 (else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON .)


state 170

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE . body RBRACE
    (75) body -> . while_loop body
    (76) body -> . for_loop body
    (77) body -> . if_else_statement body
    (78) body -> . expression SEMICOLON body
    (79) body -> . var_assign SEMICOLON body
    (80) body -> . print SEMICOLON body
    (81) body -> . increment SEMICOLON body
    (82) body -> . decrement SEMICOLON body
    (83) body -> . empty
    (25) while_loop -> . WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (34) for_loop -> . FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE
    (15) if_else_statement -> . if_statement
    (16) if_else_statement -> . if_statement else_if_statement else_statement
    (17) if_else_statement -> . if_statement else_statement
    (59) expression -> . expression operator expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . literal
    (62) expression -> . function_call
    (63) expression -> . variable
    (13) var_assign -> . variable ASSIGN expression
    (14) var_assign -> . type variable ASSIGN expression
    (74) print -> . STD NAMESPACE COUT DLEFT expression
    (29) increment -> . variable PLUS PLUS
    (30) decrement -> . variable MINUS MINUS
    (73) empty -> .
    (18) if_statement -> . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE
    (19) if_statement -> . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (50) literal -> . NUMBER
    (51) literal -> . STR
    (52) literal -> . bool_literal
    (72) function_call -> . ID LPAREN call_args RPAREN
    (11) variable -> . ID
    (12) variable -> . array
    (55) type -> . INT
    (56) type -> . DOUBLE
    (57) type -> . STRING
    (58) type -> . BOOL
    (53) bool_literal -> . TRUE
    (54) bool_literal -> . FALSE
    (10) array -> . ID brackets

    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    LPAREN          shift and go to state 24
    STD             shift and go to state 41
    RBRACE          reduce using rule 73 (empty -> .)
    IF              shift and go to state 42
    NUMBER          shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 23
    INT             shift and go to state 9
    DOUBLE          shift and go to state 10
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    body                           shift and go to state 173
    while_loop                     shift and go to state 26
    for_loop                       shift and go to state 27
    if_else_statement              shift and go to state 28
    expression                     shift and go to state 29
    var_assign                     shift and go to state 30
    print                          shift and go to state 31
    increment                      shift and go to state 32
    decrement                      shift and go to state 33
    empty                          shift and go to state 34
    if_statement                   shift and go to state 37
    literal                        shift and go to state 38
    function_call                  shift and go to state 39
    variable                       shift and go to state 40
    type                           shift and go to state 22
    bool_literal                   shift and go to state 45
    array                          shift and go to state 46

state 171

    (31) for_iteration -> expression COMMA for_iteration .

    RPAREN          reduce using rule 31 (for_iteration -> expression COMMA for_iteration .)


state 172

    (20) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE . else_if_statement
    (20) else_if_statement -> . ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> . ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON
    (22) else_if_statement -> . empty
    (73) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 174

  ! ELSE            [ reduce using rule 73 (empty -> .) ]

    else_if_statement              shift and go to state 175
    empty                          shift and go to state 75

state 173

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 176


state 174

    (20) else_if_statement -> ELSE . IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement
    (21) else_if_statement -> ELSE . IF LPAREN boolean_expr RPAREN var_assign SEMICOLON

    IF              shift and go to state 108


state 175

    (20) else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement .

    ELSE            reduce using rule 20 (else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement .)


state 176

    (34) for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .

    WHILE           reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    STD             reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    NUMBER          reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    STR             reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    DOUBLE          reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    TRUE            reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    FALSE           reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 34 (for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INCLUDE in state 0 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 2 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 2 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 3 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 3 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 4 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 4 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 6 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 145 resolved as shift
WARNING: shift/reduce conflict for OR in state 145 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (start -> empty)
WARNING: rejected rule (imports -> empty) in state 5
WARNING: reduce/reduce conflict in state 86 resolved using rule (index -> variable)
WARNING: rejected rule (expression -> variable) in state 86
WARNING: reduce/reduce conflict in state 87 resolved using rule (index -> literal)
WARNING: rejected rule (expression -> literal) in state 87
WARNING: reduce/reduce conflict in state 101 resolved using rule (literal -> bool_literal)
WARNING: rejected rule (boolean_expr -> bool_literal) in state 101
