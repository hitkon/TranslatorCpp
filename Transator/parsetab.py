
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL COMMA COMMENT COUT DIVIDE DLEFT DOT DOUBLE DRIGHT ELSE EQUAL FALSE FOR GREATER GREATER_EQUAL ID IF INCLUDE INT LBRACE LBRACKET LESSER LESSER_EQUAL LPAREN MINUS NAMESPACE NOT NOTEQUAL NUMBER OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STD STR STRING TIMES TRUE WHILEstart : imports start\n     | function start\n     | comment start\n     | emptyindex : variable\n    | literal\n    | expressionbrackets : LBRACKET index RBRACKET brackets\n    | LBRACKET index RBRACKETarray : ID bracketsvariable : ID\n    | arrayvar_assign : variable ASSIGN expression\n    | type variable ASSIGN expressionif_else_statement : if_statement\n    | if_statement else_if_statement else_statement\n    | if_statement else_statementif_statement : IF LPAREN boolean_expr RPAREN LBRACE body RBRACE\n    | IF LPAREN boolean_expr RPAREN var_assign SEMICOLONelse_if_statement : ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement\n    | ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON\n    | emptyelse_statement : ELSE LBRACE body RBRACE\n    | ELSE var_assign SEMICOLONwhile_loop : WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACEfor_assign : var_assign COMMA for_assign\n    | var_assign\n    | emptyincrement : variable PLUS PLUSdecrement : variable MINUS MINUSfor_iteration : expression COMMA for_iteration\n    | expression\n    | emptyfor_loop : FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACEcomment : COMMENTimports : INCLUDE imports\n    | empty operator : PLUS\n    | MINUS\n    | DIVIDE\n    | TIMESbool_op : AND\n    | ORcompare_op : GREATER\n    | LESSER\n    | EQUAL\n    | NOTEQUAL\n    | GREATER_EQUAL\n    | LESSER_EQUALliteral : NUMBER\n    | STR\n    | bool_literalbool_literal : TRUE\n    | FALSEtype : INT\n    | DOUBLE\n    | STRING\n    | BOOLexpression : expression operator expression\n    | LPAREN expression RPAREN\n    | literal\n    | function_call\n    | variableboolean_expr : expression compare_op expression\n    | NOT boolean_expr\n    | boolean_expr bool_op boolean_expr\n    | LPAREN boolean_expr RPAREN\n    | bool_literalfunction : type ID LPAREN RPAREN LBRACE body RBRACEcall_args : variable COMMA call_args\n    | emptyfunction_call : ID LPAREN call_args RPARENempty : print : STD NAMESPACE COUT DLEFT expressionbody : while_loop body\n    | for_loop body\n    | if_else_statement body\n    | expression SEMICOLON body\n    | var_assign SEMICOLON body\n    | print SEMICOLON body\n    | increment SEMICOLON body\n    | decrement SEMICOLON body\n    | empty'
    
_lr_action_items = {'INCLUDE':([0,2,3,4,5,6,8,16,17,56,],[6,6,6,6,-37,6,-35,-36,-37,-69,]),'COMMENT':([0,2,3,4,5,6,8,16,17,56,],[8,8,8,8,-37,-73,-35,-36,-37,-69,]),'$end':([0,1,2,3,4,5,6,8,13,14,15,16,17,56,],[-73,0,-73,-73,-73,-4,-73,-35,-1,-2,-3,-36,-37,-69,]),'INT':([0,2,3,4,5,6,8,16,17,21,26,27,28,37,56,60,66,67,68,69,71,73,74,106,107,109,135,138,140,144,150,152,156,158,159,163,165,170,176,],[9,9,9,9,-37,-73,-35,-36,-37,9,9,9,9,-15,-69,9,9,9,9,9,9,-17,9,-16,9,9,9,-24,9,9,-23,9,9,-19,-25,9,-18,9,-34,]),'DOUBLE':([0,2,3,4,5,6,8,16,17,21,26,27,28,37,56,60,66,67,68,69,71,73,74,106,107,109,135,138,140,144,150,152,156,158,159,163,165,170,176,],[10,10,10,10,-37,-73,-35,-36,-37,10,10,10,10,-15,-69,10,10,10,10,10,10,-17,10,-16,10,10,10,-24,10,10,-23,10,10,-19,-25,10,-18,10,-34,]),'STRING':([0,2,3,4,5,6,8,16,17,21,26,27,28,37,56,60,66,67,68,69,71,73,74,106,107,109,135,138,140,144,150,152,156,158,159,163,165,170,176,],[11,11,11,11,-37,-73,-35,-36,-37,11,11,11,11,-15,-69,11,11,11,11,11,11,-17,11,-16,11,11,11,-24,11,11,-23,11,11,-19,-25,11,-18,11,-34,]),'BOOL':([0,2,3,4,5,6,8,16,17,21,26,27,28,37,56,60,66,67,68,69,71,73,74,106,107,109,135,138,140,144,150,152,156,158,159,163,165,170,176,],[12,12,12,12,-37,-73,-35,-36,-37,12,12,12,12,-15,-69,12,12,12,12,12,12,-17,12,-16,12,12,12,-24,12,12,-23,12,12,-19,-25,12,-18,12,-34,]),'ID':([7,9,10,11,12,21,22,24,26,27,28,37,51,53,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,80,81,97,100,106,107,109,118,123,124,125,126,127,128,129,130,131,132,134,135,136,138,139,140,144,150,152,155,156,158,159,163,165,167,170,176,],[18,-55,-56,-57,-58,23,50,23,23,23,23,-15,50,89,23,23,-38,-39,-40,-41,23,23,23,23,23,50,-17,50,23,23,23,23,23,-16,50,23,50,23,-42,-43,23,-44,-45,-46,-47,-48,-49,23,50,23,-24,23,50,23,-23,23,23,50,-19,-25,23,-18,23,23,-34,]),'LPAREN':([18,21,23,24,26,27,28,35,36,37,42,53,60,61,62,63,64,65,66,67,68,69,70,73,76,80,81,89,97,100,106,108,109,123,124,125,126,127,128,129,130,131,132,134,136,138,139,144,150,152,155,158,159,163,165,167,170,176,],[19,24,51,24,24,24,24,70,71,-15,80,24,24,24,-38,-39,-40,-41,24,24,24,24,97,-17,24,97,24,51,97,97,-16,136,24,97,-42,-43,24,-44,-45,-46,-47,-48,-49,97,97,-24,24,24,-23,24,24,-19,-25,24,-18,24,24,-34,]),'RPAREN':([19,23,38,39,43,44,45,46,47,48,51,52,54,55,82,84,90,92,98,101,115,117,118,119,120,121,133,141,142,143,145,146,149,155,160,161,162,167,171,],[20,-11,-61,-62,-50,-51,-52,-12,-53,-54,-73,-10,90,-63,117,-71,-60,-59,122,-52,140,-72,-73,-9,143,90,-65,-70,-8,-67,-66,-64,156,-73,166,-32,-33,-73,-31,]),'LBRACE':([20,74,107,122,140,156,166,],[21,109,109,144,152,163,170,]),'WHILE':([21,26,27,28,37,60,66,67,68,69,73,106,109,138,144,150,152,158,159,163,165,170,176,],[35,35,35,35,-15,35,35,35,35,35,-17,-16,35,-24,35,-23,35,-19,-25,35,-18,35,-34,]),'FOR':([21,26,27,28,37,60,66,67,68,69,73,106,109,138,144,150,152,158,159,163,165,170,176,],[36,36,36,36,-15,36,36,36,36,36,-17,-16,36,-24,36,-23,36,-19,-25,36,-18,36,-34,]),'STD':([21,26,27,28,37,60,66,67,68,69,73,106,109,138,144,150,152,158,159,163,165,170,176,],[41,41,41,41,-15,41,41,41,41,41,-17,-16,41,-24,41,-23,41,-19,-25,41,-18,41,-34,]),'RBRACE':([21,25,26,27,28,34,37,57,58,59,60,66,67,68,69,73,91,93,94,95,96,106,109,137,138,144,150,152,154,157,158,159,163,165,168,170,173,176,],[-73,56,-73,-73,-73,-83,-15,-75,-76,-77,-73,-73,-73,-73,-73,-17,-78,-79,-80,-81,-82,-16,-73,150,-24,-73,-23,-73,159,165,-19,-25,-73,-18,172,-73,176,-34,]),'IF':([21,26,27,28,37,60,66,67,68,69,73,74,106,109,138,144,150,152,158,159,163,165,170,174,176,],[42,42,42,42,-15,42,42,42,42,42,-17,108,-16,42,-24,42,-23,42,-19,-25,42,-18,42,108,-34,]),'NUMBER':([21,24,26,27,28,37,53,60,61,62,63,64,65,66,67,68,69,70,73,76,80,81,97,100,106,109,123,124,125,126,127,128,129,130,131,132,134,136,138,139,144,150,152,155,158,159,163,165,167,170,176,],[43,43,43,43,43,-15,43,43,43,-38,-39,-40,-41,43,43,43,43,43,-17,43,43,43,43,43,-16,43,43,-42,-43,43,-44,-45,-46,-47,-48,-49,43,43,-24,43,43,-23,43,43,-19,-25,43,-18,43,43,-34,]),'STR':([21,24,26,27,28,37,53,60,61,62,63,64,65,66,67,68,69,70,73,76,80,81,97,100,106,109,123,124,125,126,127,128,129,130,131,132,134,136,138,139,144,150,152,155,158,159,163,165,167,170,176,],[44,44,44,44,44,-15,44,44,44,-38,-39,-40,-41,44,44,44,44,44,-17,44,44,44,44,44,-16,44,44,-42,-43,44,-44,-45,-46,-47,-48,-49,44,44,-24,44,44,-23,44,44,-19,-25,44,-18,44,44,-34,]),'TRUE':([21,24,26,27,28,37,53,60,61,62,63,64,65,66,67,68,69,70,73,76,80,81,97,100,106,109,123,124,125,126,127,128,129,130,131,132,134,136,138,139,144,150,152,155,158,159,163,165,167,170,176,],[47,47,47,47,47,-15,47,47,47,-38,-39,-40,-41,47,47,47,47,47,-17,47,47,47,47,47,-16,47,47,-42,-43,47,-44,-45,-46,-47,-48,-49,47,47,-24,47,47,-23,47,47,-19,-25,47,-18,47,47,-34,]),'FALSE':([21,24,26,27,28,37,53,60,61,62,63,64,65,66,67,68,69,70,73,76,80,81,97,100,106,109,123,124,125,126,127,128,129,130,131,132,134,136,138,139,144,150,152,155,158,159,163,165,167,170,176,],[48,48,48,48,48,-15,48,48,48,-38,-39,-40,-41,48,48,48,48,48,-17,48,48,48,48,48,-16,48,48,-42,-43,48,-44,-45,-46,-47,-48,-49,48,48,-24,48,48,-23,48,48,-19,-25,48,-18,48,48,-34,]),'ASSIGN':([23,40,46,49,50,52,105,119,142,],[-11,76,-12,81,-11,-10,76,-9,-8,]),'PLUS':([23,29,38,39,40,43,44,45,46,47,48,52,54,55,77,86,87,88,89,90,92,99,101,111,116,117,119,121,142,146,151,161,],[-11,62,-61,-62,77,-50,-51,-52,-12,-53,-54,-10,62,-63,112,-63,-61,62,-11,-60,62,62,-52,62,62,-72,-9,62,-8,62,62,62,]),'MINUS':([23,29,38,39,40,43,44,45,46,47,48,52,54,55,78,86,87,88,89,90,92,99,101,111,116,117,119,121,142,146,151,161,],[-11,63,-61,-62,78,-50,-51,-52,-12,-53,-54,-10,63,-63,113,-63,-61,63,-11,-60,63,63,-52,63,63,-72,-9,63,-8,63,63,63,]),'SEMICOLON':([23,29,30,31,32,33,38,39,40,43,44,45,46,47,48,52,55,71,90,92,101,102,103,104,110,111,112,113,116,117,119,133,135,142,143,145,146,147,148,151,153,164,],[-11,60,66,67,68,69,-61,-62,-63,-50,-51,-52,-12,-53,-54,-10,-63,-73,-60,-59,-68,134,-27,-28,138,-13,-29,-30,-14,-72,-9,-65,-73,-8,-67,-66,-64,155,-26,-74,158,169,]),'DIVIDE':([23,29,38,39,40,43,44,45,46,47,48,52,54,55,86,87,88,89,90,92,99,101,111,116,117,119,121,142,146,151,161,],[-11,64,-61,-62,-63,-50,-51,-52,-12,-53,-54,-10,64,-63,-63,-61,64,-11,-60,64,64,-52,64,64,-72,-9,64,-8,64,64,64,]),'TIMES':([23,29,38,39,40,43,44,45,46,47,48,52,54,55,86,87,88,89,90,92,99,101,111,116,117,119,121,142,146,151,161,],[-11,65,-61,-62,-63,-50,-51,-52,-12,-53,-54,-10,65,-63,-63,-61,65,-11,-60,65,65,-52,65,65,-72,-9,65,-8,65,65,65,]),'RBRACKET':([23,38,39,43,44,45,46,47,48,52,55,85,86,87,88,89,90,92,117,119,142,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,119,-5,-6,-7,-11,-60,-59,-72,-9,-8,]),'GREATER':([23,38,39,43,44,45,46,47,48,52,55,90,92,99,101,117,119,121,142,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,127,-52,-72,-9,127,-8,]),'LESSER':([23,38,39,43,44,45,46,47,48,52,55,90,92,99,101,117,119,121,142,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,128,-52,-72,-9,128,-8,]),'EQUAL':([23,38,39,43,44,45,46,47,48,52,55,90,92,99,101,117,119,121,142,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,129,-52,-72,-9,129,-8,]),'NOTEQUAL':([23,38,39,43,44,45,46,47,48,52,55,90,92,99,101,117,119,121,142,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,130,-52,-72,-9,130,-8,]),'GREATER_EQUAL':([23,38,39,43,44,45,46,47,48,52,55,90,92,99,101,117,119,121,142,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,131,-52,-72,-9,131,-8,]),'LESSER_EQUAL':([23,38,39,43,44,45,46,47,48,52,55,90,92,99,101,117,119,121,142,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,132,-52,-72,-9,132,-8,]),'COMMA':([23,38,39,43,44,45,46,47,48,50,52,55,83,90,92,103,111,116,117,119,142,161,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-11,-10,-63,118,-60,-59,135,-13,-14,-72,-9,-8,167,]),'AND':([23,38,39,43,44,45,46,47,48,52,55,90,92,98,101,115,117,119,120,133,142,143,145,146,147,149,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,124,-68,124,-72,-9,124,124,-8,-67,124,-64,124,124,]),'OR':([23,38,39,43,44,45,46,47,48,52,55,90,92,98,101,115,117,119,120,133,142,143,145,146,147,149,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,125,-68,125,-72,-9,125,125,-8,-67,125,-64,125,125,]),'LBRACKET':([23,50,89,119,],[53,53,53,53,]),'ELSE':([37,72,75,158,165,169,172,175,],[74,107,-22,-19,-18,-21,174,-20,]),'NAMESPACE':([41,],[79,]),'NOT':([70,80,97,100,123,124,125,134,136,],[100,100,100,100,100,-42,-43,100,100,]),'COUT':([79,],[114,]),'DLEFT':([114,],[139,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,2,3,4,],[1,13,14,15,]),'imports':([0,2,3,4,6,],[2,2,2,2,16,]),'function':([0,2,3,4,],[3,3,3,3,]),'comment':([0,2,3,4,],[4,4,4,4,]),'empty':([0,2,3,4,6,21,26,27,28,37,51,60,66,67,68,69,71,109,118,135,144,152,155,163,167,170,172,],[5,5,5,5,17,34,34,34,34,75,84,34,34,34,34,34,104,34,84,104,34,34,162,34,162,34,75,]),'type':([0,2,3,4,21,26,27,28,60,66,67,68,69,71,74,107,109,135,140,144,152,156,163,170,],[7,7,7,7,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'body':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[25,57,58,59,91,93,94,95,96,137,154,157,168,173,]),'while_loop':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'for_loop':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'if_else_statement':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'expression':([21,24,26,27,28,53,60,61,66,67,68,69,70,76,80,81,97,100,109,123,126,134,136,139,144,152,155,163,167,170,],[29,54,29,29,29,88,29,92,29,29,29,29,99,111,99,116,121,99,29,99,146,99,99,151,29,29,161,29,161,29,]),'var_assign':([21,26,27,28,60,66,67,68,69,71,74,107,109,135,140,144,152,156,163,170,],[30,30,30,30,30,30,30,30,30,103,110,110,30,103,153,30,30,164,30,30,]),'print':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'increment':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'decrement':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'if_statement':([21,26,27,28,60,66,67,68,69,109,144,152,163,170,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'literal':([21,24,26,27,28,53,60,61,66,67,68,69,70,76,80,81,97,100,109,123,126,134,136,139,144,152,155,163,167,170,],[38,38,38,38,38,87,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'function_call':([21,24,26,27,28,53,60,61,66,67,68,69,70,76,80,81,97,100,109,123,126,134,136,139,144,152,155,163,167,170,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'variable':([21,22,24,26,27,28,51,53,60,61,66,67,68,69,70,71,74,76,80,81,97,100,107,109,118,123,126,134,135,136,139,140,144,152,155,156,163,167,170,],[40,49,55,40,40,40,83,86,40,55,40,40,40,40,55,105,105,55,55,55,55,55,105,40,83,55,55,55,105,55,55,105,40,40,55,105,40,55,40,]),'bool_literal':([21,24,26,27,28,53,60,61,66,67,68,69,70,76,80,81,97,100,109,123,126,134,136,139,144,152,155,163,167,170,],[45,45,45,45,45,45,45,45,45,45,45,45,101,45,101,45,101,101,45,101,45,101,101,45,45,45,45,45,45,45,]),'array':([21,22,24,26,27,28,51,53,60,61,66,67,68,69,70,71,74,76,80,81,97,100,107,109,118,123,126,134,135,136,139,140,144,152,155,156,163,167,170,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'brackets':([23,50,89,119,],[52,52,52,142,]),'operator':([29,54,88,92,99,111,116,121,146,151,161,],[61,61,61,61,61,61,61,61,61,61,61,]),'else_if_statement':([37,172,],[72,175,]),'else_statement':([37,72,],[73,106,]),'call_args':([51,118,],[82,141,]),'index':([53,],[85,]),'boolean_expr':([70,80,97,100,123,134,136,],[98,115,120,133,145,147,149,]),'for_assign':([71,135,],[102,148,]),'bool_op':([98,115,120,133,145,147,149,],[123,123,123,123,123,123,123,]),'compare_op':([99,121,],[126,126,]),'for_iteration':([155,167,],[160,171,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> imports start','start',2,'p_start','main.py',110),
  ('start -> function start','start',2,'p_start','main.py',111),
  ('start -> comment start','start',2,'p_start','main.py',112),
  ('start -> empty','start',1,'p_start','main.py',113),
  ('index -> variable','index',1,'p_index','main.py',120),
  ('index -> literal','index',1,'p_index','main.py',121),
  ('index -> expression','index',1,'p_index','main.py',122),
  ('brackets -> LBRACKET index RBRACKET brackets','brackets',4,'p_brackets','main.py',127),
  ('brackets -> LBRACKET index RBRACKET','brackets',3,'p_brackets','main.py',128),
  ('array -> ID brackets','array',2,'p_array','main.py',135),
  ('variable -> ID','variable',1,'p_variable','main.py',140),
  ('variable -> array','variable',1,'p_variable','main.py',141),
  ('var_assign -> variable ASSIGN expression','var_assign',3,'p_var_assign','main.py',146),
  ('var_assign -> type variable ASSIGN expression','var_assign',4,'p_var_assign','main.py',147),
  ('if_else_statement -> if_statement','if_else_statement',1,'p_if_else_statement','main.py',155),
  ('if_else_statement -> if_statement else_if_statement else_statement','if_else_statement',3,'p_if_else_statement','main.py',156),
  ('if_else_statement -> if_statement else_statement','if_else_statement',2,'p_if_else_statement','main.py',157),
  ('if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE','if_statement',7,'p_if_statement','main.py',164),
  ('if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON','if_statement',6,'p_if_statement','main.py',165),
  ('else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement','else_if_statement',9,'p_else_if_statement','main.py',173),
  ('else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON','else_if_statement',7,'p_else_if_statement','main.py',174),
  ('else_if_statement -> empty','else_if_statement',1,'p_else_if_statement','main.py',175),
  ('else_statement -> ELSE LBRACE body RBRACE','else_statement',4,'p_else_statement','main.py',184),
  ('else_statement -> ELSE var_assign SEMICOLON','else_statement',3,'p_else_statement','main.py',185),
  ('while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE','while_loop',7,'p_while_loop','main.py',192),
  ('for_assign -> var_assign COMMA for_assign','for_assign',3,'p_for_assign','main.py',197),
  ('for_assign -> var_assign','for_assign',1,'p_for_assign','main.py',198),
  ('for_assign -> empty','for_assign',1,'p_for_assign','main.py',199),
  ('increment -> variable PLUS PLUS','increment',3,'p_increment','main.py',208),
  ('decrement -> variable MINUS MINUS','decrement',3,'p_decrement','main.py',213),
  ('for_iteration -> expression COMMA for_iteration','for_iteration',3,'p_for_iteration','main.py',218),
  ('for_iteration -> expression','for_iteration',1,'p_for_iteration','main.py',219),
  ('for_iteration -> empty','for_iteration',1,'p_for_iteration','main.py',220),
  ('for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE','for_loop',11,'p_for_loop','main.py',229),
  ('comment -> COMMENT','comment',1,'p_comment','main.py',234),
  ('imports -> INCLUDE imports','imports',2,'p_imports','main.py',239),
  ('imports -> empty','imports',1,'p_imports','main.py',240),
  ('operator -> PLUS','operator',1,'p_operator','main.py',258),
  ('operator -> MINUS','operator',1,'p_operator','main.py',259),
  ('operator -> DIVIDE','operator',1,'p_operator','main.py',260),
  ('operator -> TIMES','operator',1,'p_operator','main.py',261),
  ('bool_op -> AND','bool_op',1,'p_bool_op','main.py',266),
  ('bool_op -> OR','bool_op',1,'p_bool_op','main.py',267),
  ('compare_op -> GREATER','compare_op',1,'p_compare_op','main.py',275),
  ('compare_op -> LESSER','compare_op',1,'p_compare_op','main.py',276),
  ('compare_op -> EQUAL','compare_op',1,'p_compare_op','main.py',277),
  ('compare_op -> NOTEQUAL','compare_op',1,'p_compare_op','main.py',278),
  ('compare_op -> GREATER_EQUAL','compare_op',1,'p_compare_op','main.py',279),
  ('compare_op -> LESSER_EQUAL','compare_op',1,'p_compare_op','main.py',280),
  ('literal -> NUMBER','literal',1,'p_literal','main.py',285),
  ('literal -> STR','literal',1,'p_literal','main.py',286),
  ('literal -> bool_literal','literal',1,'p_literal','main.py',287),
  ('bool_literal -> TRUE','bool_literal',1,'p_bool_literal','main.py',292),
  ('bool_literal -> FALSE','bool_literal',1,'p_bool_literal','main.py',293),
  ('type -> INT','type',1,'p_type','main.py',301),
  ('type -> DOUBLE','type',1,'p_type','main.py',302),
  ('type -> STRING','type',1,'p_type','main.py',303),
  ('type -> BOOL','type',1,'p_type','main.py',304),
  ('expression -> expression operator expression','expression',3,'p_expression','main.py',309),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','main.py',310),
  ('expression -> literal','expression',1,'p_expression','main.py',311),
  ('expression -> function_call','expression',1,'p_expression','main.py',312),
  ('expression -> variable','expression',1,'p_expression','main.py',313),
  ('boolean_expr -> expression compare_op expression','boolean_expr',3,'p_boolean_expr','main.py',321),
  ('boolean_expr -> NOT boolean_expr','boolean_expr',2,'p_boolean_expr','main.py',322),
  ('boolean_expr -> boolean_expr bool_op boolean_expr','boolean_expr',3,'p_boolean_expr','main.py',323),
  ('boolean_expr -> LPAREN boolean_expr RPAREN','boolean_expr',3,'p_boolean_expr','main.py',324),
  ('boolean_expr -> bool_literal','boolean_expr',1,'p_boolean_expr','main.py',325),
  ('function -> type ID LPAREN RPAREN LBRACE body RBRACE','function',7,'p_function','main.py',332),
  ('call_args -> variable COMMA call_args','call_args',3,'p_call_args','main.py',337),
  ('call_args -> empty','call_args',1,'p_call_args','main.py',338),
  ('function_call -> ID LPAREN call_args RPAREN','function_call',4,'p_function_call','main.py',345),
  ('empty -> <empty>','empty',0,'p_empty','main.py',350),
  ('print -> STD NAMESPACE COUT DLEFT expression','print',5,'p_print','main.py',355),
  ('body -> while_loop body','body',2,'p_body','main.py',359),
  ('body -> for_loop body','body',2,'p_body','main.py',360),
  ('body -> if_else_statement body','body',2,'p_body','main.py',361),
  ('body -> expression SEMICOLON body','body',3,'p_body','main.py',362),
  ('body -> var_assign SEMICOLON body','body',3,'p_body','main.py',363),
  ('body -> print SEMICOLON body','body',3,'p_body','main.py',364),
  ('body -> increment SEMICOLON body','body',3,'p_body','main.py',365),
  ('body -> decrement SEMICOLON body','body',3,'p_body','main.py',366),
  ('body -> empty','body',1,'p_body','main.py',367),
]
