
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL COMMA COMMENT COUT DIVIDE DLEFT DOT DOUBLE DRIGHT ELSE EQUAL FALSE FOR GREATER GREATER_EQUAL ID IF INCLUDE INT LBRACE LBRACKET LESSER LESSER_EQUAL LPAREN MINUS NAMESPACE NOT NOTEQUAL NUMBER OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STD STR STRING TIMES TRUE WHILEstart : imports start\n     | function start\n     | comment start\n     | emptyindex : variable\n    | literal\n    | expressionbrackets : LBRACKET index RBRACKET brackets\n    | LBRACKET index RBRACKETarray : ID bracketsvariable : ID\n    | arrayvar_assign : variable ASSIGN expression\n    | type variable ASSIGN expressionif_else_statement : if_statement\n    | if_statement else_if_statement else_statement\n    | if_statement else_statementif_statement : IF LPAREN boolean_expr RPAREN LBRACE body RBRACE\n    | IF LPAREN boolean_expr RPAREN var_assign SEMICOLONelse_if_statement : ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement\n    | ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON\n    | emptyelse_statement : ELSE LBRACE body RBRACE\n    | ELSE var_assign SEMICOLONwhile_loop : WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACEfor_assign : var_assign COMMA for_assign\n    | var_assign\n    | emptyincrement : variable PLUS PLUSdecrement : variable MINUS MINUSfor_iteration : var_assign COMMA for_iteration\n    | var_assign\n    | emptyfor_loop : FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACEcomment : COMMENTimports : INCLUDE imports\n    | empty operator : PLUS\n    | MINUS\n    | DIVIDE\n    | TIMESbool_op : AND\n    | ORcompare_op : GREATER\n    | LESSER\n    | EQUAL\n    | NOTEQUAL\n    | GREATER_EQUAL\n    | LESSER_EQUALliteral : NUMBER\n    | STR\n    | bool_literalbool_literal : TRUE\n    | FALSEtype : INT\n    | DOUBLE\n    | STRING\n    | BOOLexpression : expression operator expression\n    | LPAREN expression RPAREN\n    | literal\n    | function_call\n    | variableboolean_expr : expression compare_op expression\n    | NOT boolean_expr\n    | boolean_expr bool_op boolean_expr\n    | LPAREN boolean_expr RPAREN\n    | bool_literalfunction : type ID LPAREN RPAREN LBRACE body RBRACEcall_args : variable COMMA call_args\n    | emptyfunction_call : ID LPAREN call_args RPARENempty : print : STD NAMESPACE COUT DLEFT expressionbody : while_loop body\n    | for_loop body\n    | if_else_statement body\n    | expression SEMICOLON body\n    | var_assign SEMICOLON body\n    | print SEMICOLON body\n    | increment SEMICOLON body\n    | decrement SEMICOLON body\n    | comment body\n    | empty'
    
_lr_action_items = {'INCLUDE':([0,2,3,4,5,6,8,16,17,57,],[6,6,6,6,-37,6,-35,-36,-37,-69,]),'COMMENT':([0,2,3,4,5,6,8,16,17,21,26,27,28,34,38,57,61,67,68,69,70,75,108,111,140,146,152,154,160,161,165,167,172,178,],[8,8,8,8,-37,-73,-35,-36,-37,8,8,8,8,8,-15,-69,8,8,8,8,8,-17,-16,8,-24,8,-23,8,-19,-25,8,-18,8,-34,]),'$end':([0,1,2,3,4,5,6,8,13,14,15,16,17,57,],[-73,0,-73,-73,-73,-4,-73,-35,-1,-2,-3,-36,-37,-69,]),'INT':([0,2,3,4,5,6,8,16,17,21,26,27,28,34,38,57,61,67,68,69,70,73,75,76,108,109,111,137,140,142,146,152,154,157,158,160,161,165,167,169,172,178,],[9,9,9,9,-37,-73,-35,-36,-37,9,9,9,9,9,-15,-69,9,9,9,9,9,9,-17,9,-16,9,9,9,-24,9,9,-23,9,9,9,-19,-25,9,-18,9,9,-34,]),'DOUBLE':([0,2,3,4,5,6,8,16,17,21,26,27,28,34,38,57,61,67,68,69,70,73,75,76,108,109,111,137,140,142,146,152,154,157,158,160,161,165,167,169,172,178,],[10,10,10,10,-37,-73,-35,-36,-37,10,10,10,10,10,-15,-69,10,10,10,10,10,10,-17,10,-16,10,10,10,-24,10,10,-23,10,10,10,-19,-25,10,-18,10,10,-34,]),'STRING':([0,2,3,4,5,6,8,16,17,21,26,27,28,34,38,57,61,67,68,69,70,73,75,76,108,109,111,137,140,142,146,152,154,157,158,160,161,165,167,169,172,178,],[11,11,11,11,-37,-73,-35,-36,-37,11,11,11,11,11,-15,-69,11,11,11,11,11,11,-17,11,-16,11,11,11,-24,11,11,-23,11,11,11,-19,-25,11,-18,11,11,-34,]),'BOOL':([0,2,3,4,5,6,8,16,17,21,26,27,28,34,38,57,61,67,68,69,70,73,75,76,108,109,111,137,140,142,146,152,154,157,158,160,161,165,167,169,172,178,],[12,12,12,12,-37,-73,-35,-36,-37,12,12,12,12,12,-15,-69,12,12,12,12,12,12,-17,12,-16,12,12,12,-24,12,12,-23,12,12,12,-19,-25,12,-18,12,12,-34,]),'ID':([7,8,9,10,11,12,21,22,24,26,27,28,34,38,52,54,61,62,63,64,65,66,67,68,69,70,72,73,75,76,78,82,83,99,102,108,109,111,120,125,126,127,128,129,130,131,132,133,134,136,137,138,140,141,142,146,152,154,157,158,160,161,165,167,169,172,178,],[18,-35,-55,-56,-57,-58,23,51,23,23,23,23,23,-15,51,91,23,23,-38,-39,-40,-41,23,23,23,23,23,51,-17,51,23,23,23,23,23,-16,51,23,51,23,-42,-43,23,-44,-45,-46,-47,-48,-49,23,51,23,-24,23,51,23,-23,23,51,51,-19,-25,23,-18,51,23,-34,]),'WHILE':([8,21,26,27,28,34,38,61,67,68,69,70,75,108,111,140,146,152,154,160,161,165,167,172,178,],[-35,36,36,36,36,36,-15,36,36,36,36,36,-17,-16,36,-24,36,-23,36,-19,-25,36,-18,36,-34,]),'FOR':([8,21,26,27,28,34,38,61,67,68,69,70,75,108,111,140,146,152,154,160,161,165,167,172,178,],[-35,37,37,37,37,37,-15,37,37,37,37,37,-17,-16,37,-24,37,-23,37,-19,-25,37,-18,37,-34,]),'LPAREN':([8,18,21,23,24,26,27,28,34,36,37,38,43,54,61,62,63,64,65,66,67,68,69,70,72,75,78,82,83,91,99,102,108,110,111,125,126,127,128,129,130,131,132,133,134,136,138,140,141,146,152,154,160,161,165,167,172,178,],[-35,19,24,52,24,24,24,24,24,72,73,-15,82,24,24,24,-38,-39,-40,-41,24,24,24,24,99,-17,24,99,24,52,99,99,-16,138,24,99,-42,-43,24,-44,-45,-46,-47,-48,-49,99,99,-24,24,24,-23,24,-19,-25,24,-18,24,-34,]),'STD':([8,21,26,27,28,34,38,61,67,68,69,70,75,108,111,140,146,152,154,160,161,165,167,172,178,],[-35,42,42,42,42,42,-15,42,42,42,42,42,-17,-16,42,-24,42,-23,42,-19,-25,42,-18,42,-34,]),'IF':([8,21,26,27,28,34,38,61,67,68,69,70,75,76,108,111,140,146,152,154,160,161,165,167,172,176,178,],[-35,43,43,43,43,43,-15,43,43,43,43,43,-17,110,-16,43,-24,43,-23,43,-19,-25,43,-18,43,110,-34,]),'NUMBER':([8,21,24,26,27,28,34,38,54,61,62,63,64,65,66,67,68,69,70,72,75,78,82,83,99,102,108,111,125,126,127,128,129,130,131,132,133,134,136,138,140,141,146,152,154,160,161,165,167,172,178,],[-35,44,44,44,44,44,44,-15,44,44,44,-38,-39,-40,-41,44,44,44,44,44,-17,44,44,44,44,44,-16,44,44,-42,-43,44,-44,-45,-46,-47,-48,-49,44,44,-24,44,44,-23,44,-19,-25,44,-18,44,-34,]),'STR':([8,21,24,26,27,28,34,38,54,61,62,63,64,65,66,67,68,69,70,72,75,78,82,83,99,102,108,111,125,126,127,128,129,130,131,132,133,134,136,138,140,141,146,152,154,160,161,165,167,172,178,],[-35,45,45,45,45,45,45,-15,45,45,45,-38,-39,-40,-41,45,45,45,45,45,-17,45,45,45,45,45,-16,45,45,-42,-43,45,-44,-45,-46,-47,-48,-49,45,45,-24,45,45,-23,45,-19,-25,45,-18,45,-34,]),'TRUE':([8,21,24,26,27,28,34,38,54,61,62,63,64,65,66,67,68,69,70,72,75,78,82,83,99,102,108,111,125,126,127,128,129,130,131,132,133,134,136,138,140,141,146,152,154,160,161,165,167,172,178,],[-35,48,48,48,48,48,48,-15,48,48,48,-38,-39,-40,-41,48,48,48,48,48,-17,48,48,48,48,48,-16,48,48,-42,-43,48,-44,-45,-46,-47,-48,-49,48,48,-24,48,48,-23,48,-19,-25,48,-18,48,-34,]),'FALSE':([8,21,24,26,27,28,34,38,54,61,62,63,64,65,66,67,68,69,70,72,75,78,82,83,99,102,108,111,125,126,127,128,129,130,131,132,133,134,136,138,140,141,146,152,154,160,161,165,167,172,178,],[-35,49,49,49,49,49,49,-15,49,49,49,-38,-39,-40,-41,49,49,49,49,49,-17,49,49,49,49,49,-16,49,49,-42,-43,49,-44,-45,-46,-47,-48,-49,49,49,-24,49,49,-23,49,-19,-25,49,-18,49,-34,]),'RBRACE':([8,21,25,26,27,28,34,35,38,58,59,60,61,67,68,69,70,71,75,93,95,96,97,98,108,111,139,140,146,152,154,156,159,160,161,165,167,170,172,175,178,],[-35,-73,57,-73,-73,-73,-73,-84,-15,-75,-76,-77,-73,-73,-73,-73,-73,-83,-17,-78,-79,-80,-81,-82,-16,-73,152,-24,-73,-23,-73,161,167,-19,-25,-73,-18,174,-73,178,-34,]),'RPAREN':([19,23,39,40,44,45,46,47,48,49,52,53,55,56,84,86,92,94,100,103,113,117,118,119,120,121,122,123,135,143,144,145,147,148,151,157,162,163,164,169,173,],[20,-11,-61,-62,-50,-51,-52,-12,-53,-54,-73,-10,92,-63,119,-71,-60,-59,124,-52,-13,142,-14,-72,-73,-9,145,92,-65,-70,-8,-67,-66,-64,158,-73,168,-32,-33,-73,-31,]),'LBRACE':([20,76,109,124,142,158,168,],[21,111,111,146,154,165,172,]),'ASSIGN':([23,41,47,50,51,53,107,121,144,],[-11,78,-12,83,-11,-10,78,-9,-8,]),'PLUS':([23,29,39,40,41,44,45,46,47,48,49,53,55,56,79,88,89,90,91,92,94,101,103,113,118,119,121,123,144,148,153,],[-11,63,-61,-62,79,-50,-51,-52,-12,-53,-54,-10,63,-63,114,-63,-61,63,-11,-60,63,63,-52,63,63,-72,-9,63,-8,63,63,]),'MINUS':([23,29,39,40,41,44,45,46,47,48,49,53,55,56,80,88,89,90,91,92,94,101,103,113,118,119,121,123,144,148,153,],[-11,64,-61,-62,80,-50,-51,-52,-12,-53,-54,-10,64,-63,115,-63,-61,64,-11,-60,64,64,-52,64,64,-72,-9,64,-8,64,64,]),'SEMICOLON':([23,29,30,31,32,33,39,40,41,44,45,46,47,48,49,53,56,73,92,94,103,104,105,106,112,113,114,115,118,119,121,135,137,144,145,147,148,149,150,153,155,166,],[-11,61,67,68,69,70,-61,-62,-63,-50,-51,-52,-12,-53,-54,-10,-63,-73,-60,-59,-68,136,-27,-28,140,-13,-29,-30,-14,-72,-9,-65,-73,-8,-67,-66,-64,157,-26,-74,160,171,]),'DIVIDE':([23,29,39,40,41,44,45,46,47,48,49,53,55,56,88,89,90,91,92,94,101,103,113,118,119,121,123,144,148,153,],[-11,65,-61,-62,-63,-50,-51,-52,-12,-53,-54,-10,65,-63,-63,-61,65,-11,-60,65,65,-52,65,65,-72,-9,65,-8,65,65,]),'TIMES':([23,29,39,40,41,44,45,46,47,48,49,53,55,56,88,89,90,91,92,94,101,103,113,118,119,121,123,144,148,153,],[-11,66,-61,-62,-63,-50,-51,-52,-12,-53,-54,-10,66,-63,-63,-61,66,-11,-60,66,66,-52,66,66,-72,-9,66,-8,66,66,]),'RBRACKET':([23,39,40,44,45,46,47,48,49,53,56,87,88,89,90,91,92,94,119,121,144,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,121,-5,-6,-7,-11,-60,-59,-72,-9,-8,]),'GREATER':([23,39,40,44,45,46,47,48,49,53,56,92,94,101,103,119,121,123,144,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,129,-52,-72,-9,129,-8,]),'LESSER':([23,39,40,44,45,46,47,48,49,53,56,92,94,101,103,119,121,123,144,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,130,-52,-72,-9,130,-8,]),'EQUAL':([23,39,40,44,45,46,47,48,49,53,56,92,94,101,103,119,121,123,144,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,131,-52,-72,-9,131,-8,]),'NOTEQUAL':([23,39,40,44,45,46,47,48,49,53,56,92,94,101,103,119,121,123,144,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,132,-52,-72,-9,132,-8,]),'GREATER_EQUAL':([23,39,40,44,45,46,47,48,49,53,56,92,94,101,103,119,121,123,144,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,133,-52,-72,-9,133,-8,]),'LESSER_EQUAL':([23,39,40,44,45,46,47,48,49,53,56,92,94,101,103,119,121,123,144,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,134,-52,-72,-9,134,-8,]),'COMMA':([23,39,40,44,45,46,47,48,49,51,53,56,85,92,94,105,113,118,119,121,144,163,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-11,-10,-63,120,-60,-59,137,-13,-14,-72,-9,-8,169,]),'AND':([23,39,40,44,45,46,47,48,49,53,56,92,94,100,103,117,119,121,122,135,144,145,147,148,149,151,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,126,-68,126,-72,-9,126,126,-8,-67,126,-64,126,126,]),'OR':([23,39,40,44,45,46,47,48,49,53,56,92,94,100,103,117,119,121,122,135,144,145,147,148,149,151,],[-11,-61,-62,-50,-51,-52,-12,-53,-54,-10,-63,-60,-59,127,-68,127,-72,-9,127,127,-8,-67,127,-64,127,127,]),'LBRACKET':([23,51,91,121,],[54,54,54,54,]),'ELSE':([38,74,77,160,167,171,174,177,],[76,109,-22,-19,-18,-21,176,-20,]),'NAMESPACE':([42,],[81,]),'NOT':([72,82,99,102,125,126,127,136,138,],[102,102,102,102,102,-42,-43,102,102,]),'COUT':([81,],[116,]),'DLEFT':([116,],[141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,2,3,4,],[1,13,14,15,]),'imports':([0,2,3,4,6,],[2,2,2,2,16,]),'function':([0,2,3,4,],[3,3,3,3,]),'comment':([0,2,3,4,21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[4,4,4,4,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'empty':([0,2,3,4,6,21,26,27,28,34,38,52,61,67,68,69,70,73,111,120,137,146,154,157,165,169,172,174,],[5,5,5,5,17,35,35,35,35,35,77,86,35,35,35,35,35,106,35,86,106,35,35,164,35,164,35,77,]),'type':([0,2,3,4,21,26,27,28,34,61,67,68,69,70,73,76,109,111,137,142,146,154,157,158,165,169,172,],[7,7,7,7,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'body':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[25,58,59,60,71,93,95,96,97,98,139,156,159,170,175,]),'while_loop':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'for_loop':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'if_else_statement':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'expression':([21,24,26,27,28,34,54,61,62,67,68,69,70,72,78,82,83,99,102,111,125,128,136,138,141,146,154,165,172,],[29,55,29,29,29,29,90,29,94,29,29,29,29,101,113,101,118,123,101,29,101,148,101,101,153,29,29,29,29,]),'var_assign':([21,26,27,28,34,61,67,68,69,70,73,76,109,111,137,142,146,154,157,158,165,169,172,],[30,30,30,30,30,30,30,30,30,30,105,112,112,30,105,155,30,30,163,166,30,163,30,]),'print':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'increment':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'decrement':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'if_statement':([21,26,27,28,34,61,67,68,69,70,111,146,154,165,172,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'literal':([21,24,26,27,28,34,54,61,62,67,68,69,70,72,78,82,83,99,102,111,125,128,136,138,141,146,154,165,172,],[39,39,39,39,39,39,89,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'function_call':([21,24,26,27,28,34,54,61,62,67,68,69,70,72,78,82,83,99,102,111,125,128,136,138,141,146,154,165,172,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'variable':([21,22,24,26,27,28,34,52,54,61,62,67,68,69,70,72,73,76,78,82,83,99,102,109,111,120,125,128,136,137,138,141,142,146,154,157,158,165,169,172,],[41,50,56,41,41,41,41,85,88,41,56,41,41,41,41,56,107,107,56,56,56,56,56,107,41,85,56,56,56,107,56,56,107,41,41,107,107,41,107,41,]),'bool_literal':([21,24,26,27,28,34,54,61,62,67,68,69,70,72,78,82,83,99,102,111,125,128,136,138,141,146,154,165,172,],[46,46,46,46,46,46,46,46,46,46,46,46,46,103,46,103,46,103,103,46,103,46,103,103,46,46,46,46,46,]),'array':([21,22,24,26,27,28,34,52,54,61,62,67,68,69,70,72,73,76,78,82,83,99,102,109,111,120,125,128,136,137,138,141,142,146,154,157,158,165,169,172,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'brackets':([23,51,91,121,],[53,53,53,144,]),'operator':([29,55,90,94,101,113,118,123,148,153,],[62,62,62,62,62,62,62,62,62,62,]),'else_if_statement':([38,174,],[74,177,]),'else_statement':([38,74,],[75,108,]),'call_args':([52,120,],[84,143,]),'index':([54,],[87,]),'boolean_expr':([72,82,99,102,125,136,138,],[100,117,122,135,147,149,151,]),'for_assign':([73,137,],[104,150,]),'bool_op':([100,117,122,135,147,149,151,],[125,125,125,125,125,125,125,]),'compare_op':([101,123,],[128,128,]),'for_iteration':([157,169,],[162,173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> imports start','start',2,'p_start','main.py',110),
  ('start -> function start','start',2,'p_start','main.py',111),
  ('start -> comment start','start',2,'p_start','main.py',112),
  ('start -> empty','start',1,'p_start','main.py',113),
  ('index -> variable','index',1,'p_index','main.py',120),
  ('index -> literal','index',1,'p_index','main.py',121),
  ('index -> expression','index',1,'p_index','main.py',122),
  ('brackets -> LBRACKET index RBRACKET brackets','brackets',4,'p_brackets','main.py',127),
  ('brackets -> LBRACKET index RBRACKET','brackets',3,'p_brackets','main.py',128),
  ('array -> ID brackets','array',2,'p_array','main.py',135),
  ('variable -> ID','variable',1,'p_variable','main.py',140),
  ('variable -> array','variable',1,'p_variable','main.py',141),
  ('var_assign -> variable ASSIGN expression','var_assign',3,'p_var_assign','main.py',146),
  ('var_assign -> type variable ASSIGN expression','var_assign',4,'p_var_assign','main.py',147),
  ('if_else_statement -> if_statement','if_else_statement',1,'p_if_else_statement','main.py',155),
  ('if_else_statement -> if_statement else_if_statement else_statement','if_else_statement',3,'p_if_else_statement','main.py',156),
  ('if_else_statement -> if_statement else_statement','if_else_statement',2,'p_if_else_statement','main.py',157),
  ('if_statement -> IF LPAREN boolean_expr RPAREN LBRACE body RBRACE','if_statement',7,'p_if_statement','main.py',164),
  ('if_statement -> IF LPAREN boolean_expr RPAREN var_assign SEMICOLON','if_statement',6,'p_if_statement','main.py',165),
  ('else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN LBRACE body RBRACE else_if_statement','else_if_statement',9,'p_else_if_statement','main.py',173),
  ('else_if_statement -> ELSE IF LPAREN boolean_expr RPAREN var_assign SEMICOLON','else_if_statement',7,'p_else_if_statement','main.py',174),
  ('else_if_statement -> empty','else_if_statement',1,'p_else_if_statement','main.py',175),
  ('else_statement -> ELSE LBRACE body RBRACE','else_statement',4,'p_else_statement','main.py',184),
  ('else_statement -> ELSE var_assign SEMICOLON','else_statement',3,'p_else_statement','main.py',185),
  ('while_loop -> WHILE LPAREN boolean_expr RPAREN LBRACE body RBRACE','while_loop',7,'p_while_loop','main.py',192),
  ('for_assign -> var_assign COMMA for_assign','for_assign',3,'p_for_assign','main.py',197),
  ('for_assign -> var_assign','for_assign',1,'p_for_assign','main.py',198),
  ('for_assign -> empty','for_assign',1,'p_for_assign','main.py',199),
  ('increment -> variable PLUS PLUS','increment',3,'p_increment','main.py',208),
  ('decrement -> variable MINUS MINUS','decrement',3,'p_decrement','main.py',213),
  ('for_iteration -> var_assign COMMA for_iteration','for_iteration',3,'p_for_iteration','main.py',218),
  ('for_iteration -> var_assign','for_iteration',1,'p_for_iteration','main.py',219),
  ('for_iteration -> empty','for_iteration',1,'p_for_iteration','main.py',220),
  ('for_loop -> FOR LPAREN for_assign SEMICOLON boolean_expr SEMICOLON for_iteration RPAREN LBRACE body RBRACE','for_loop',11,'p_for_loop','main.py',229),
  ('comment -> COMMENT','comment',1,'p_comment','main.py',234),
  ('imports -> INCLUDE imports','imports',2,'p_imports','main.py',239),
  ('imports -> empty','imports',1,'p_imports','main.py',240),
  ('operator -> PLUS','operator',1,'p_operator','main.py',249),
  ('operator -> MINUS','operator',1,'p_operator','main.py',250),
  ('operator -> DIVIDE','operator',1,'p_operator','main.py',251),
  ('operator -> TIMES','operator',1,'p_operator','main.py',252),
  ('bool_op -> AND','bool_op',1,'p_bool_op','main.py',257),
  ('bool_op -> OR','bool_op',1,'p_bool_op','main.py',258),
  ('compare_op -> GREATER','compare_op',1,'p_compare_op','main.py',266),
  ('compare_op -> LESSER','compare_op',1,'p_compare_op','main.py',267),
  ('compare_op -> EQUAL','compare_op',1,'p_compare_op','main.py',268),
  ('compare_op -> NOTEQUAL','compare_op',1,'p_compare_op','main.py',269),
  ('compare_op -> GREATER_EQUAL','compare_op',1,'p_compare_op','main.py',270),
  ('compare_op -> LESSER_EQUAL','compare_op',1,'p_compare_op','main.py',271),
  ('literal -> NUMBER','literal',1,'p_literal','main.py',276),
  ('literal -> STR','literal',1,'p_literal','main.py',277),
  ('literal -> bool_literal','literal',1,'p_literal','main.py',278),
  ('bool_literal -> TRUE','bool_literal',1,'p_bool_literal','main.py',283),
  ('bool_literal -> FALSE','bool_literal',1,'p_bool_literal','main.py',284),
  ('type -> INT','type',1,'p_type','main.py',292),
  ('type -> DOUBLE','type',1,'p_type','main.py',293),
  ('type -> STRING','type',1,'p_type','main.py',294),
  ('type -> BOOL','type',1,'p_type','main.py',295),
  ('expression -> expression operator expression','expression',3,'p_expression','main.py',300),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','main.py',301),
  ('expression -> literal','expression',1,'p_expression','main.py',302),
  ('expression -> function_call','expression',1,'p_expression','main.py',303),
  ('expression -> variable','expression',1,'p_expression','main.py',304),
  ('boolean_expr -> expression compare_op expression','boolean_expr',3,'p_boolean_expr','main.py',312),
  ('boolean_expr -> NOT boolean_expr','boolean_expr',2,'p_boolean_expr','main.py',313),
  ('boolean_expr -> boolean_expr bool_op boolean_expr','boolean_expr',3,'p_boolean_expr','main.py',314),
  ('boolean_expr -> LPAREN boolean_expr RPAREN','boolean_expr',3,'p_boolean_expr','main.py',315),
  ('boolean_expr -> bool_literal','boolean_expr',1,'p_boolean_expr','main.py',316),
  ('function -> type ID LPAREN RPAREN LBRACE body RBRACE','function',7,'p_function','main.py',323),
  ('call_args -> variable COMMA call_args','call_args',3,'p_call_args','main.py',328),
  ('call_args -> empty','call_args',1,'p_call_args','main.py',329),
  ('function_call -> ID LPAREN call_args RPAREN','function_call',4,'p_function_call','main.py',336),
  ('empty -> <empty>','empty',0,'p_empty','main.py',341),
  ('print -> STD NAMESPACE COUT DLEFT expression','print',5,'p_print','main.py',346),
  ('body -> while_loop body','body',2,'p_body','main.py',350),
  ('body -> for_loop body','body',2,'p_body','main.py',351),
  ('body -> if_else_statement body','body',2,'p_body','main.py',352),
  ('body -> expression SEMICOLON body','body',3,'p_body','main.py',353),
  ('body -> var_assign SEMICOLON body','body',3,'p_body','main.py',354),
  ('body -> print SEMICOLON body','body',3,'p_body','main.py',355),
  ('body -> increment SEMICOLON body','body',3,'p_body','main.py',356),
  ('body -> decrement SEMICOLON body','body',3,'p_body','main.py',357),
  ('body -> comment body','body',2,'p_body','main.py',358),
  ('body -> empty','body',1,'p_body','main.py',359),
]
